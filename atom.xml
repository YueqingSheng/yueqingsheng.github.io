<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yueqingsheng.github.io</id>
    <title>Random thoughts</title>
    <updated>2020-06-18T21:30:09.268Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yueqingsheng.github.io"/>
    <link rel="self" href="https://yueqingsheng.github.io/atom.xml"/>
    <subtitle>Don&apos;t Learn to Code — Learn to Automate</subtitle>
    <logo>https://yueqingsheng.github.io/images/avatar.png</logo>
    <icon>https://yueqingsheng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Random thoughts</rights>
    <entry>
        <title type="html"><![CDATA[强化学习 Day 3 神经网络方法]]></title>
        <id>https://yueqingsheng.github.io/qiang-hua-xue-xi-day-3-shen-jing-wang-luo-fang-fa/</id>
        <link href="https://yueqingsheng.github.io/qiang-hua-xue-xi-day-3-shen-jing-wang-luo-fang-fa/">
        </link>
        <updated>2020-06-17T17:28:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="q-表不适合的场景">Q 表不适合的场景</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592501404580.png" alt="" loading="lazy"><br>
状态太多或者不可数，表格无法容纳</p>
<h2 id="值函数近似">值函数近似</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592503297313.png" alt="" loading="lazy"></figure>
<h2 id="神经网络">神经网络</h2>
<p>拟合任意函数 map x(输入)-&gt;y（输出）<br>
<img src="https://yueqingsheng.github.io/post-images/1592503591885.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592503739786.png" alt="" loading="lazy"></p>
<h2 id="dqn">DQN</h2>
<p>拟合Q表格，找出 s 到 Q 的 maping, 即 Q 表格<br>
<img src="https://yueqingsheng.github.io/post-images/1592504045511.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592504377262.png" alt="" loading="lazy"><br>
s=&gt; Q（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mo>∗</mo></msub></mrow><annotation encoding="application/x-tex">a_*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）, 输出一个包含不同 a 的向量， 逼近 Target Q</p>
<h3 id="创新点">创新点</h3>
<h4 id="1-经验回放">1. 经验回放</h4>
<p><img src="https://yueqingsheng.github.io/post-images/1592504472911.png" alt="" loading="lazy"><br>
存储一部分经验数据，从中随机选取一部分 (batch) 更新数据</p>
<h5 id="off-policy-回顾">off-policy 回顾</h5>
<p>士兵 (behavior policy):  根据战术攻打堡垒，拿到战斗经验，给到军师分析<br>
军师 (Target policy): 根据经验，提升战术，让前方战士打的更好<br>
战术 (Q table)<br>
DQN， 军师从士兵的经验池随机抽取一部分经验。使用缓冲区存储经验，经验可以重复利用。<br>
<img src="https://yueqingsheng.github.io/post-images/1592505463466.png" alt="" loading="lazy"><br>
sample 输入 batch_size 输出抽取的5个数组<br>
<img src="https://yueqingsheng.github.io/post-images/1592505685903.png" alt="" loading="lazy"></p>
<h4 id="2-固定-q-目标">2. 固定 Q 目标</h4>
<p>保持 Q_target 稳定， 定期 copy Q<br>
<img src="https://yueqingsheng.github.io/post-images/1592512287833.png" alt="" loading="lazy"></p>
<h3 id="dqn-流程图">DQN 流程图</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592512821261.png" alt="" loading="lazy"></figure>
<h2 id="parl-dqn">PARL DQN</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592513030605.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592513082474.png" alt="" loading="lazy"><br>
model 神经网络， Algorithm  loss function , agent 和环境交互</p>
<h3 id="modelpy">model.py</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592513356656.png" alt="" loading="lazy"><br>
输入 obs(S)，通过神经网络计算 Q 值</p>
<h3 id="algorithm">algorithm</h3>
<p>init : 输入model 和 参数，copy model, 初始化参数,model , target_model<br>
<img src="https://yueqingsheng.github.io/post-images/1592513526805.png" alt="" loading="lazy"><br>
sync_target: 同步 model, target_model 参数<br>
<img src="https://yueqingsheng.github.io/post-images/1592513630399.png" alt="" loading="lazy"><br>
predict: 返回 model 的值， Q</p>
<h4 id="learn">learn:</h4>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592514289290.png" alt="" loading="lazy"></figure>
<ol>
<li>计算 target_Q<br>
<img src="https://yueqingsheng.github.io/post-images/1592513814629.png" alt="" loading="lazy"><br>
freeze target_Q, 阻止梯度传递，防止参数更新</li>
<li>计算 Q(s,a)<br>
layers.cast(done) true 返回 1， false 返回 0<br>
action 做 onehot， 乘以 Q(s,a) 得到 real Q</li>
<li>计算 loss</li>
</ol>
<h4 id="agent">agent:</h4>
<p>更新网络，获取 Q 值。</p>
<h4 id="cartpole">CartPole</h4>
<p><img src="https://yueqingsheng.github.io/post-images/1592514818545.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592514957943.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592515112909.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592515130186.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592515451246.png" alt="" loading="lazy"><br>
跟 Q learning 主要区别就是使用神经网络计算 Q 值，扩展了 Q 值的范围。并使用经验回放和固定Q目标，重复利用了经验样本和稳定了算法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计6 聊天系统]]></title>
        <id>https://yueqingsheng.github.io/xi-tong-she-ji-6-liao-tian-xi-tong/</id>
        <link href="https://yueqingsheng.github.io/xi-tong-she-ji-6-liao-tian-xi-tong/">
        </link>
        <updated>2020-06-17T06:56:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="设计微信">设计微信</h2>
<h2 id="scenario">Scenario</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592496158173.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592496270302.png" alt="" loading="lazy"><br>
微信不是点对点通信？ 不是，可以留言。历史消息存在服务器，留一段时间(缓冲期)删除，或者不删除。</p>
<h2 id="service">Service</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592496789439.png" alt="" loading="lazy"></figure>
<h2 id="storage">Storage</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592499919444.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592500035973.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 2 Sarsa & Q-learning 实现思路]]></title>
        <id>https://yueqingsheng.github.io/day-2-zuo-ye-si-lu/</id>
        <link href="https://yueqingsheng.github.io/day-2-zuo-ye-si-lu/">
        </link>
        <updated>2020-06-14T00:20:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第一步把-q-table-看一下">第一步把 Q table 看一下</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592440727420.png" alt="" loading="lazy"><br>
16行4列的np array， 每一格为Q(state, action)的值</p>
<h2 id="sample和predict-就是epsilon-greedy算法">sample和predict:  就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span>-greedy算法</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592439809913.png" alt="" loading="lazy"></figure>
<h3 id="sample">sample</h3>
<p>在 0-1 roll 一个数，如果这个数小于等于1- <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span> 就触发argmax事件，否则触发随机行动。</p>
<p>可能会用到的函数：</p>
<blockquote>
<p>numpy.random.uniform(low=0.0, high=1.0, size=None)<br>
在 low 到 high 范围取size个样本，默认0到1取一个样本</p>
</blockquote>
<blockquote>
<p>numpy.random.choice(a, size=None, replace=True, p=None)<br>
从 a 列表里随机选size个数， a可以是1维列表或者int, int的话就是 range(a)<br>
Parameters: a: If an ndarray, a random sample is generated from its elements. If an int, the random sample is generated as if a was np.arange(n)</p>
</blockquote>
<h3 id="predict">predict</h3>
<p>从第 s/obs 行，取 Q 值最大的 a。=&gt; find the max index of value，即求最大值的坐标。<br>
因为有可能有多个最大值，我们不想每次都走同一个action, 所以从这些最大值的坐标随机出一个。</p>
<p>可能会用到的函数：</p>
<blockquote>
<p>从 2D Numpy Array 选某行：  ndArray[row_index] 或者 ndArray[row_index, :]<br>
numpy.where(condition) 输出满足条件 ((condition)) 元素的坐标 (等价于numpy.nonzero)。这里的坐标以tuple的形式给出。</p>
</blockquote>
<p>这里 np.where 返回类似 (array([0, 1, 2, 3]),) 元组这种格式。所以用下标取出第一个array</p>
<h2 id="learn">learn</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592444105446.png" alt="" loading="lazy"><br>
这里就是先把方括号里的算出来，再乘 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> 加上原来的值<br>
Q learning 的 sample 和 predict 和 Sarsa 完全一样，唯一就是 更新 Q 的公式不同。<br>
<img src="https://yueqingsheng.github.io/post-images/1592428118258.png" alt="" loading="lazy"></p>
<h2 id="显示视图">显示视图</h2>
<p>把 test_episode 里的这两行反注释掉<br>
<img src="https://yueqingsheng.github.io/post-images/1592449956397.png" alt="" loading="lazy"><br>
gridworld.py 下载地址：https://raw.githubusercontent.com/PaddlePaddle/PARL/develop/examples/tutorials/lesson1/gridworld.py</p>
<pre><code class="language-python">from gridworld import FrozenLakeWapper
env = gym.make(&quot;FrozenLake-v0&quot;, is_slippery=False) 
env = FrozenLakeWapper(env)
</code></pre>
<h2 id="错误no-display-name-and-no-display-environment-variable">错误：no display name and no $DISPLAY environment variable</h2>
<p>Jupyter没有窗口环境，要本地运行，或者远程terminal跑才行</p>
<h2 id="结果展示">结果展示</h2>
<h3 id="sarsa">Sarsa</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592448717310.gif" alt="" loading="lazy"></figure>
<h3 id="q-learning">Q-learning</h3>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592449876779.gif" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[强化学习 Day 2 Sarsa & Q-learning]]></title>
        <id>https://yueqingsheng.github.io/qiang-hua-xue-xi-day-2-sarsa-q-learning/</id>
        <link href="https://yueqingsheng.github.io/qiang-hua-xue-xi-day-2-sarsa-q-learning/">
        </link>
        <updated>2020-06-13T05:57:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="强化学习mdp四元组s-a-p-r">强化学习MDP四元组&lt;S, A, P, R&gt;</h2>
<p>强化学习是解决跟时间相关的序列决策问题。<br>
<img src="https://yueqingsheng.github.io/post-images/1592416960594.png" alt="" loading="lazy"></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>[</mo><msub><mi>s</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>t</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>s</mi><mi>t</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>t</mi></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">p[s_{t+1}, r_{t} | s_{t}, a_{t}]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mtext>在</mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>t</mi></msub></mstyle><mtext>时刻，选择</mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>t</mi></msub></mstyle><mtext>动作的时候，转移到</mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle><mtext> 而且拿到 </mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>t</mi></msub></mstyle><mtext>奖励</mtext></mrow><mi mathvariant="normal">的</mi><mi mathvariant="normal">概</mi><mi mathvariant="normal">率</mi></mrow><annotation encoding="application/x-tex">\text{在$s_ t$时刻，选择$a_t$动作的时候，转移到$s_{t+1}$ 而且拿到 $r_{t}$奖励}的概率
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord text"><span class="mord cjk_fallback">在</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">时刻，选择</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">动作的时候，转移到</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"> </span><span class="mord cjk_fallback">而且拿到</span><span class="mord"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">奖励</span></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">概</span><span class="mord cjk_fallback">率</span></span></span></span></span></p>
<blockquote>
<p>马尔可夫性质: 当前时刻的状态仅与前一时刻的状态和动作有关，与其他时刻的状态和动作条件独立。</p>
</blockquote>
<blockquote>
<p>马尔可夫决策过程（Markov Decision Process, MDP）是序贯决策（sequential decision）的数学模型，用于在系统状态具有马尔可夫性质的环境中模拟智能体可实现的随机性策略与回报</p>
</blockquote>
<p><img src="https://yueqingsheng.github.io/post-images/1592419241042.png" alt="" loading="lazy"><br>
P函数：随机性，转移到另外一种状态的概率<br>
R函数：奖励函数</p>
<h2 id="model-based-vs-model-free">Model-based vs Model-free</h2>
<p>Model based: 如果 P, R 已知，则环境是已知的，可以用动态规划计算最优方案。<br>
Model free: 当解决未知或随机的环境时，即 P, R 未知，可以使用强化学习。</p>
<h2 id="q-函数">Q 函数</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592419978987.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592420512413.png" alt="" loading="lazy"><br>
Q的目标是未来的总收益<br>
<img src="https://yueqingsheng.github.io/post-images/1592420605219.png" alt="" loading="lazy"><br>
但是当时间过长时，需要加一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span></span> 衰减系数，时间越久，对当前的收益影响越小</p>
<h2 id="更新q表格">更新Q表格</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592421245188.png" alt="" loading="lazy"><br>
下个状态的价值可以用来强化上一个状态的价值，如结合食物和铃声一起影响狗的食欲（流口水）。<br>
<img src="https://yueqingsheng.github.io/post-images/1592422219338.jpg" alt="" loading="lazy"><br>
这个公式其实就是把每一步的收益逼近于未来收益之和，即走到这一步获得的总收益。每一次向目标值的方向更新一点。<br>
<img src="https://yueqingsheng.github.io/post-images/1592422876957.png" alt="" loading="lazy"><br>
每次跳转到下一个状态时，通过这些Sarsa参数，便可得知当前状态的Q value。<br>
<img src="https://yueqingsheng.github.io/post-images/1592423174750.png" alt="" loading="lazy"><br>
算法：每走一步，先选出要做的动作。再走下一步，通过状态<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从Q表拿到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 然后通过下一步和上一步的参数更新 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mo>(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">Q(s_1, a_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h3 id="如何通过状态-s-去取出动作-a-epsilon-greedy">如何通过状态 s 去取出动作 a ？ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span>-greedy</h3>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592424271702.png" alt="" loading="lazy"></figure>
<h2 id="sarsa-代码">Sarsa 代码</h2>
<p><img src="https://lh6.googleusercontent.com/8jhtLe0-rCvlm69sSpofk5eh3g1hpOmFgBFQPLQKTgw7iUN8d6-mHxrx4JjnQGKI6AwDzpMiePXbNRU1O-NeDy6ER9QWMLjF2IHDDc_BTGKff--BNUZU9iw8QubW3nnBz6Qls7tT" alt="" loading="lazy"><br>
<a href="https://aistudio.baidu.com/aistudio/projectdetail/567852">paddle实现链接</a></p>
<h2 id="off-policy">Off-Policy</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592427661829.png" alt="" loading="lazy"><br>
Off-Policy 不和环境交互</p>
<h2 id="q-learning">Q-learning</h2>
<figure data-type="image" tabindex="2"><img src="https://i.stack.imgur.com/JE6BY.png" alt="" loading="lazy"></figure>
<h2 id="q-learning-vs-sarsa">Q-learning vs Sarsa</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592427877376.png" alt="" loading="lazy"><br>
Q-learning 的下个状态选取使Q最大的action<br>
<img src="https://yueqingsheng.github.io/post-images/1592428118258.png" alt="" loading="lazy"></p>
<h2 id="off-policy-vs-on-policy">Off-Policy vs On-policy</h2>
<blockquote>
<p>policy: 策略是指通过状态 s 去取出动作 a 的 方法/概率。Policy specifies an action 𝑎, that is taken in a state 𝑠 (or more precisely, 𝜋 is a probability, that an action 𝑎 is taken in a state 𝑠).</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592428550500.png" alt="" loading="lazy"></figure>
<blockquote>
<p>行为策略：用来与环境互动收集情报、产生数据的策略，即训练过程中的策略。 π(a|s)<br>
目标策略：在行为策略产生的数据中不断学习和优化得到的策略，即学习训练完毕后拿去做行为评估的策略。µ(a|s)</p>
</blockquote>
<p>区别是</p>
<blockquote>
<p>on-policy 通过的与环境交互的经验更新Q, 按以往经验来。 off-policy 就不管之前经验了，通过任意方式获取action, 比如 greedy。</p>
</blockquote>
<h2 id="总结">总结</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592431533553.png" alt="" loading="lazy"><br>
On policy 对于保留目前探索的成果有好处 ，但容易陷入局部最优。不够冒险。<br>
Off policy 够冒险，容易达到全局最优，但收敛更慢，试错更多，不适合现实中试错成本太大的尝试。</p>
<h2 id="拓展">拓展：</h2>
<p><a href="https://analyticsindiamag.com/reinforcement-learning-policy/">ON-POLICY VS OFF-POLICY REINFORCEMENT LEARNING</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[强化学习 Day 1 Introduction]]></title>
        <id>https://yueqingsheng.github.io/qiang-hua-xue-xi/</id>
        <link href="https://yueqingsheng.github.io/qiang-hua-xue-xi/">
        </link>
        <updated>2020-06-12T20:41:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是强化学习">什么是强化学习？</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592340187285.png" alt="" loading="lazy"></figure>
<h2 id="两部分-三要素">两部分 三要素</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592340281494.png" alt="" loading="lazy"><br>
在 Flappy bird 中</p>
<table>
<thead>
<tr>
<th>agent</th>
<th>environment</th>
<th>state</th>
<th>action</th>
<th>reward</th>
</tr>
</thead>
<tbody>
<tr>
<td>鸟</td>
<td>鸟周围的环境，水管、天空（包括小鸟本身）</td>
<td>拍个照（目前的像素）</td>
<td>向上向下动作</td>
<td>距离（越远奖励越高）</td>
</tr>
</tbody>
</table>
<p>动一下截个图 再决定下一个动作<br>
跟环境交互，决策。<br>
<img src="https://yueqingsheng.github.io/post-images/1592341430929.png" alt="" loading="lazy"><br>
奖励是延迟的。迷宫走完，才有奖励。<br>
<img src="https://yueqingsheng.github.io/post-images/1592341492276.png" alt="" loading="lazy"></p>
<h2 id="强化学习和其他机器学习的关系">强化学习和其他机器学习的关系</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592341779032.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592342011873.png" alt="" loading="lazy"><br>
监督样本一般样本内无关系。强化学习，样本之间相互影响。<br>
<img src="https://yueqingsheng.github.io/post-images/1592342296638.png" alt="" loading="lazy"><br>
基于价值会向固定方向走，基于策略随机性更高一些。</p>
<h2 id="rl-agent-environment-交互接口">RL agent &lt;-&gt; environment 交互接口</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592343026454.png" alt="" loading="lazy"><br>
reset 重置<br>
render 渲染目前<br>
step 交互一步</p>
<h3 id="step-输出参数">Step 输出参数</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592342821467.png" alt="" loading="lazy"></figure>
<ol>
<li>1-36 位置（36格内的位置）</li>
<li>-1 reward(奖励，每走一步会有惩罚，目标最少步数走完)</li>
<li>true/false 游戏是否完成</li>
<li>info 额外信息</li>
</ol>
<h3 id="git-clone-depth1">git clone --depth=1</h3>
<blockquote>
<p>depth 用于指定克隆深度，为 1 即表示只克隆最近一次 commit. 可以解决项目过大的问题</p>
</blockquote>
<h2 id="总结">总结</h2>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592343683260.png" alt="" loading="lazy"></figure>
<p>拓展：<a href="https://www.zhihu.com/question/23474039/answer/269526476">为什么有人说 Python 的多线程是鸡肋呢？</a></p>
<p>图片来源：<a href="https://aistudio.baidu.com/aistudio/projectdetail/560767">PARL 强化学习公开课 Lesson1</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计5 基于地理位置的信息系统（Location based service)]]></title>
        <id>https://yueqingsheng.github.io/xi-tong-she-ji-5-ji-yu-di-li-wei-zhi-de-xin-xi-xi-tong-location-based-service/</id>
        <link href="https://yueqingsheng.github.io/xi-tong-she-ji-5-ji-yu-di-li-wei-zhi-de-xin-xi-xi-tong-location-based-service/">
        </link>
        <updated>2020-06-12T02:09:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="rpcremote-procedure-call">RPC(remote procedure call)</h2>
<p>不同的机器之间调用函数<br>
http包含了很多验证信息, 不高效</p>
<h2 id="google-s2位置储存-查询系统">Google S2(位置储存 查询系统)</h2>
<p>System design = logic design + infrastructure design(架构设计)</p>
<h2 id="scenario">Scenario</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592234676481.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592235236181.png" alt="" loading="lazy"><br>
收集用户信息，预测打车概率。</p>
<h2 id="service">Service</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592239148033.png" alt="" loading="lazy"></figure>
<h2 id="storage">Storage</h2>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592246122954.png" alt="" loading="lazy"></figure>
<h3 id="trip-table单">Trip Table:（单）</h3>
<p>读多写少 每四秒查一次附近的接单信息</p>
<h3 id="location-table">Location Table:</h3>
<p>读少写多 每四秒写一次driver location</p>
<h2 id="范围查询">范围查询</h2>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592247699767.png" alt="" loading="lazy"></figure>
<h2 id="二维查询映射到一维">二维查询映射到一维</h2>
<h3 id="google-s2">Google S2</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592247980056.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592248137315.png" alt="" loading="lazy"></p>
<h3 id="geohash">Geohash</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592248499067.png" alt="" loading="lazy"><br>
查看公共前缀相似度，32份，<br>
<strong>为什么是 1：2？</strong><br>
4 * 8（180，360）纬经度比<br>
<strong>为什么上下方两行长？</strong><br>
因为地球是圆的，上下占的面积相当于三角形<br>
<strong>为什么是 4*8?</strong><br>
<img src="https://yueqingsheng.github.io/post-images/1592249368751.png" alt="" loading="lazy"><br>
缺陷  ：刚好在线上，线两边差距大</p>
<h4 id="查询-google-半径两公里以内的车">查询 Google 半径两公里以内的车</h4>
<p>geohash LIKE 9q9hv%, %分号在后面，表示以9q9hv开头<br>
<img src="https://yueqingsheng.github.io/post-images/1592249754838.png" alt="" loading="lazy"><br>
Redis value: set 删除 O(1) list 删除O(n)</p>
<h2 id="匹配">匹配</h2>
<figure data-type="image" tabindex="4"><img src="https://yueqingsheng.github.io/post-images/1592251096560.png" alt="" loading="lazy"></figure>
<h2 id="scale">Scale</h2>
<p>迁移成本低，损失成本大。单点 Failure</p>
<h3 id="db-sharding">DB sharding</h3>
<p>按Geo hash 前四位<br>
Uber 使用城市 Sharding</p>
<h4 id="定义城市">定义城市</h4>
<p>Geo Fence<br>
求一个点是否在多边形内<br>
<img src="https://yueqingsheng.github.io/post-images/1592251619394.png" alt="" loading="lazy"><br>
乘客在边界上，记录城市连接关系</p>
<h4 id="机场">机场</h4>
<p>先找到城市，再查询 airport fence</p>
<h5 id="减少风险">减少风险</h5>
<ol>
<li>Master slave</li>
<li>换数据库Riak</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nestjs 统一返回格式]]></title>
        <id>https://yueqingsheng.github.io/nestjs-tong-yi-fan-hui-ge-shi/</id>
        <link href="https://yueqingsheng.github.io/nestjs-tong-yi-fan-hui-ge-shi/">
        </link>
        <updated>2020-06-11T12:40:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="统一返回格式">统一返回格式</h2>
<p>｛data：object，message：请求成功，code：200｝</p>
<h2 id="成功的格式">成功的格式</h2>
<pre><code class="language-json">{
 &quot;statusCode&quot;: 200,
  &quot;data&quot;: {
    &quot;username&quot;: &quot;string&quot;,
    &quot;access_token&quot;: &quot;XXX&quot;
  },
  &quot;code&quot;: 0,
  &quot;message&quot;: &quot;请求成功&quot;
}
</code></pre>
<h2 id="失败的格式">失败的格式</h2>
<pre><code class="language-json">{
  &quot;statusCode&quot;: 401,
  &quot;data&quot;: {
    &quot;error&quot;: &quot;Client Error&quot;
  },
  &quot;message&quot;: &quot;请求失败&quot;,
  &quot;code&quot;: 1,
  &quot;url&quot;: &quot;/api/auth/profile&quot;
}
</code></pre>
<p>暂定code代表成功，1代表失败，成功data里是返回内容，失败data里是错误信息。</p>
<h1 id="拦截全部的错误请求">拦截全部的错误请求</h1>
<p>src/core/filters/all-exception.filter’;</p>
<pre><code class="language-typescript">import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';
import { Request, Response } from 'express';
@Catch()
export class AllExceptionFilter&lt;T&gt; implements ExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse&lt;Response&gt;();
    const request = ctx.getRequest&lt;Request&gt;();
    const status =
      exception instanceof HttpException
        ? exception.getStatus()
        : HttpStatus.INTERNAL_SERVER_ERROR;

    const message = exception.message.message
      ? exception.message.message
      : `${status &gt;= 500 ? 'Service Error' : 'Client Error'}`;
    const errorResponse = {
      statusCode: status,
      data: { error: message },
      message: '请求失败',
      code: 1, // 自定义code
    };
    // 设置返回的状态码、请求头、发送错误信息
    response.status(status);
    response.header('Content-Type', 'application/json; charset=utf-8');
    response.send(errorResponse);
  }
}
</code></pre>
<h1 id="拦截成功的返回数据">拦截成功的返回数据</h1>
<p>src/core/interceptors/response.interceptor’;</p>
<pre><code class="language-typescript">import {
  CallHandler,
  ExecutionContext,
  Injectable,
  NestInterceptor,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { Response } from 'express';
@Injectable()
export class ResponseInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any&gt; {
    const response = context.switchToHttp().getResponse&lt;Response&gt;();
    console.log(response.statusCode);
    return next.handle().pipe(
      map(data =&gt; {
        return {
          data,
          code: 0,
          message: '请求成功',
          statusCode: response.statusCode,
        };
      }),
    );
  }
}
</code></pre>
<h1 id="全局注册">全局注册</h1>
<p>main.ts</p>
<pre><code class="language-typescript">...
import { TransformInterceptor } from './core/interceptor/transform.interceptor';

async function bootstrap() {
  ...
  // 全局注册拦截器
  app.useGlobalFilters(new AllExceptionFilter());
  app.useGlobalInterceptors(new ResponseInterceptor());
  ...
}
bootstrap();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计4 API设计和短网址]]></title>
        <id>https://yueqingsheng.github.io/xi-tong-she-ji-4-duan-lian-jie/</id>
        <link href="https://yueqingsheng.github.io/xi-tong-she-ji-4-duan-lian-jie/">
        </link>
        <updated>2020-06-10T07:55:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="网站系统域名">网站系统，域名</h2>
<h3 id="访问google">访问Google</h3>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592078252769.png" alt="" loading="lazy"></figure>
<ol>
<li>You type maps.google.com into the address bar of your browser.</li>
<li>The browser checks the cache for a DNS record to find the corresponding IP address of maps.google.com.</li>
<li>The browser sends an HTTP request to the webserver.</li>
<li>webserver =&gt; http server(Apache, nginx)</li>
<li>http server =&gt; WebApplication(Django, nodejs)</li>
<li>webapplication response<br>
<img src="https://yueqingsheng.github.io/post-images/1592079735308.png" alt="" loading="lazy"></li>
</ol>
<h2 id="api-设计">API 设计</h2>
<p>直接使用user id是不安全的，正确方式是通过登陆后的token获取id<br>
<img src="https://yueqingsheng.github.io/post-images/1592083213524.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592083280425.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592083338439.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592087205505.png" alt="" loading="lazy"></p>
<h3 id="news-feed-list-web-api">News Feed List Web Api</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592088686604.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592088214530.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592088839355.png" alt="" loading="lazy"></p>
<h3 id="翻页-pagination">翻页 Pagination</h3>
<p>多请求一个 page_size = n + 1, max_id = the last item id, real displayed = n items<br>
<img src="https://yueqingsheng.github.io/post-images/1592090634903.png" alt="" loading="lazy"></p>
<h4 id="refresh">refresh</h4>
<p>find items id &gt; max_id (latest)</p>
<h3 id="mention">Mention</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592114459940.png" alt="" loading="lazy"></figure>
<h4 id="直接返回a缺点">直接返回<a>缺点</h4>
<p><img src="https://yueqingsheng.github.io/post-images/1592114602952.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592114695897.png" alt="" loading="lazy"></p>
<h2 id="短网址">短网址</h2>
<h3 id="service">Service</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592116210957.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592116301504.png" alt="" loading="lazy"></p>
<h3 id="转换算法">转换算法</h3>
<p>随机生成去重<br>
<img src="https://yueqingsheng.github.io/post-images/1592116830654.png" alt="" loading="lazy"></p>
<h4 id="sql">SQL</h4>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592153139387.png" alt="" loading="lazy"></figure>
<h4 id="nosql">NoSQL</h4>
<figure data-type="image" tabindex="4"><img src="https://yueqingsheng.github.io/post-images/1592153194128.png" alt="" loading="lazy"></figure>
<h3 id="scale">Scale</h3>
<h4 id="优化-response-time">优化 response time</h4>
<ol>
<li>Use Cache</li>
<li>地理位置提速<br>
centralized mysql + distributed memcached<br>
<img src="https://yueqingsheng.github.io/post-images/1592163807150.png" alt="" loading="lazy"></li>
</ol>
<h3 id="一台数据库服务器搞不定">一台数据库服务器搞不定</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592185289011.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592185509180.png" alt="" loading="lazy"></p>
<h2 id="练习-custom-url-自定义链接-转-longurl">练习 Custom url (自定义链接 转 longurl)</h2>
<p>自增Id法： 单独创建一个 cutsom url -&gt; longurl 数据表<br>
随机生成法： 直接存储 custom url</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计 3 sharding&hash]]></title>
        <id>https://yueqingsheng.github.io/xi-tong-she-ji-3-databaseandhash/</id>
        <link href="https://yueqingsheng.github.io/xi-tong-she-ji-3-databaseandhash/">
        </link>
        <updated>2020-06-07T15:56:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="scale">Scale</h2>
<h3 id="qps">QPS</h3>
<h3 id="single-point-failure一台服务器挂">Single point failure(一台服务器挂)</h3>
<h4 id="sharding-数据拆分">sharding 数据拆分</h4>
<ol>
<li>解决 single point failure</li>
<li>分摊流量</li>
</ol>
<h4 id="replica-数据复制">replica 数据复制</h4>
<ol>
<li>数据恢复</li>
<li>分摊流量</li>
</ol>
<h2 id="数据库拆分">数据库拆分</h2>
<h2 id="竖向拆分">竖向拆分</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591722453484.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591722492145.png" alt="" loading="lazy"><br>
缺点： 当表单特别大，column无法拆分时无法用</p>
<h2 id="横向拆分">横向拆分</h2>
<p><strong>新数据放新机器，老数据放老机器的问题是什么？</strong><br>
根据数据的新旧程度来拆分的话，新数据的访问次数比旧数据的访问次数是要明显多的，会导致数据访问不均匀的问题。<br>
这种方法并不会导致存储不均匀，最多只有最新的一台机器的数据相对少一些，其他的机器都还是均匀的。也不会导致不知道数据去哪台机器取，比如根据 id 来拆分，0~99在1号机器，1-199 在2号机器的话，根据 id 可以算出对应的机器是哪个<br>
<img src="https://yueqingsheng.github.io/post-images/1591722936674.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591722974334.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591723056231.png" alt="" loading="lazy"><br>
75%的数据迁移</p>
<h2 id="一致性哈希算法">一致性哈希算法</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591724662966.png" alt="" loading="lazy"><br>
匀走相邻两台机器的一部分数据</p>
<h3 id="缺陷">缺陷：</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1591724873965.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591724909043.png" alt="" loading="lazy"></p>
<h2 id="改进">改进：</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591725237232.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591725356209.png" alt="" loading="lazy"><br>
红黑树（balanced tree）</p>
<h2 id="数据复制-replica">数据复制 Replica</h2>
<h3 id="replica-vs-backup">Replica vs Backup</h3>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1591725861122.png" alt="" loading="lazy"></figure>
<h3 id="sql">SQL</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1591725986397.png" alt="" loading="lazy"></figure>
<h3 id="nosql">NoSQL</h3>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1591726102538.png" alt="" loading="lazy"></figure>
<h2 id="实战1user-table-sharding">实战1：User Table Sharding</h2>
<p>怎么取数据就怎么拆数据库<br>
按照 username找用户 查username-&gt;id表<br>
<img src="https://yueqingsheng.github.io/post-images/1591752365390.png" alt="" loading="lazy"></p>
<h2 id="实战2friendship-table-sharding">实战2：Friendship Table Sharding</h2>
<p>双向好友关系，必须存两条关系</p>
<h2 id="实战4-news-feedtimeline-sharding">实战4： News Feed/Timeline Sharding</h2>
<p>owner id/userid</p>
<h2 id="实战5-lintcode-submission-userproblemstatus">实战5： LintCode Submission (user/problem/status)</h2>
<figure data-type="image" tabindex="4"><img src="https://yueqingsheng.github.io/post-images/1591753013575.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[随想]]></title>
        <id>https://yueqingsheng.github.io/sui-xiang 2/</id>
        <link href="https://yueqingsheng.github.io/sui-xiang 2/">
        </link>
        <updated>2020-06-07T05:36:42.000Z</updated>
        <summary type="html"><![CDATA[<p>会记录一些突然想到的想法到这里</p>
]]></summary>
        <content type="html"><![CDATA[<p>会记录一些突然想到的想法到这里</p>
<!-- more -->
<h3 id="开会">开会</h3>
<p>会议中有太多的干扰项，具体实现的方案应该放在会议前去做。多人的交流和干扰，反而会使想出一个好的解决方案的效率降低。</p>
<h3 id="项目宏伟的缺陷">项目宏伟的缺陷</h3>
<p>一些宏伟项目想法在提出来的时候，可能会很好。但是应该在每部分的实现逻辑（细节）尽可能完善后（想出来，或者demo实现一下），再招聘程序员去做。</p>
<h3 id="bug解决方案">bug解决方案</h3>
<p>当卡在某个bug自己短时间内无法解决时，或找不到原因，最有效率的方式是去搜索这个问题，查看别人是怎么解决的。</p>
<h3 id="时间规划">时间规划</h3>
<p>可以给计划设个下限和上限，以避免规划没达到的心里落差。</p>
]]></content>
    </entry>
</feed>