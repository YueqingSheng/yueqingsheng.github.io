<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yueqingsheng.github.io</id>
    <title>Random thoughts</title>
    <updated>2020-06-17T23:56:48.419Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yueqingsheng.github.io"/>
    <link rel="self" href="https://yueqingsheng.github.io/atom.xml"/>
    <subtitle>Don&apos;t Learn to Code — Learn to Automate</subtitle>
    <logo>https://yueqingsheng.github.io/images/avatar.png</logo>
    <icon>https://yueqingsheng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Random thoughts</rights>
    <entry>
        <title type="html"><![CDATA[强化学习 Day 1]]></title>
        <id>https://yueqingsheng.github.io/post/qiang-hua-xue-xi/</id>
        <link href="https://yueqingsheng.github.io/post/qiang-hua-xue-xi/">
        </link>
        <updated>2020-06-14T08:41:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是强化学习">什么是强化学习？</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592340187285.png" alt="" loading="lazy"></figure>
<h2 id="两部分-三要素">两部分 三要素</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592340281494.png" alt="" loading="lazy"><br>
在 Flappy bird 中</p>
<table>
<thead>
<tr>
<th>agent</th>
<th>environment</th>
<th>state</th>
<th>action</th>
<th>reward</th>
</tr>
</thead>
<tbody>
<tr>
<td>鸟</td>
<td>鸟周围的环境，水管、天空（包括小鸟本身）</td>
<td>拍个照（目前的像素）</td>
<td>向上向下动作</td>
<td>距离（越远奖励越高）</td>
</tr>
</tbody>
</table>
<p>动一下截个图 再决定下一个动作<br>
跟环境交互，决策。<br>
<img src="https://yueqingsheng.github.io/post-images/1592341430929.png" alt="" loading="lazy"><br>
奖励是延迟的。迷宫走完，才有奖励。<br>
<img src="https://yueqingsheng.github.io/post-images/1592341492276.png" alt="" loading="lazy"></p>
<h2 id="强化学习和其他机器学习的关系">强化学习和其他机器学习的关系</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592341779032.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592342011873.png" alt="" loading="lazy"><br>
监督样本一般样本内无关系。强化学习，样本之间相互影响。<br>
<img src="https://yueqingsheng.github.io/post-images/1592342296638.png" alt="" loading="lazy"><br>
基于价值会向固定方向走，基于策略随机性更高一些。</p>
<h2 id="rl-agent-environment-交互接口">RL agent &lt;-&gt; environment 交互接口</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592343026454.png" alt="" loading="lazy"><br>
reset 重置<br>
render 渲染目前<br>
step 交互一步</p>
<h3 id="step-输出参数">Step 输出参数</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592342821467.png" alt="" loading="lazy"></figure>
<ol>
<li>1-36 位置（36格内的位置）</li>
<li>-1 reward(奖励，每走一步会有惩罚，目标最少步数走完)</li>
<li>true/false 游戏是否完成</li>
<li>info 额外信息</li>
</ol>
<h3 id="git-clone-depth1">git clone --depth=1</h3>
<blockquote>
<p>depth 用于指定克隆深度，为 1 即表示只克隆最近一次 commit. 可以解决项目过大的问题</p>
</blockquote>
<h2 id="总结">总结</h2>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592343683260.png" alt="" loading="lazy"></figure>
<p>拓展：<a href="https://www.zhihu.com/question/23474039/answer/269526476">为什么有人说 Python 的多线程是鸡肋呢？</a></p>
<p>图片来源：<a href="https://aistudio.baidu.com/aistudio/projectdetail/560767">PARL 强化学习公开课 Lesson1</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[强化学习 Day 2 Sarsa, Q-learning]]></title>
        <id>https://yueqingsheng.github.io/post/qiang-hua-xue-xi-day-2-sarsa-q-learning/</id>
        <link href="https://yueqingsheng.github.io/post/qiang-hua-xue-xi-day-2-sarsa-q-learning/">
        </link>
        <updated>2020-06-14T05:57:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="强化学习mdp四元组s-a-p-r">强化学习MDP四元组&lt;S, A, P, R&gt;</h2>
<p>强化学习是解决跟时间相关的序列决策问题。<br>
<img src="https://yueqingsheng.github.io/post-images/1592416960594.png" alt="" loading="lazy"></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>[</mo><msub><mi>s</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>r</mi><mi>t</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>s</mi><mi>t</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>t</mi></msub><mo>]</mo></mrow><annotation encoding="application/x-tex">p[s_{t+1}, r_{t} | s_{t}, a_{t}]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mtext>在</mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>t</mi></msub></mstyle><mtext>时刻，选择</mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>t</mi></msub></mstyle><mtext>动作的时候，转移到</mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle><mtext> 而且拿到 </mtext><mstyle scriptlevel="0" displaystyle="false"><msub><mi>r</mi><mi>t</mi></msub></mstyle><mtext>奖励</mtext></mrow><mi mathvariant="normal">的</mi><mi mathvariant="normal">概</mi><mi mathvariant="normal">率</mi></mrow><annotation encoding="application/x-tex">\text{在$s_ t$时刻，选择$a_t$动作的时候，转移到$s_{t+1}$ 而且拿到 $r_{t}$奖励}的概率
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord text"><span class="mord cjk_fallback">在</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">时刻，选择</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">动作的时候，转移到</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"> </span><span class="mord cjk_fallback">而且拿到</span><span class="mord"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">奖励</span></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">概</span><span class="mord cjk_fallback">率</span></span></span></span></span></p>
<blockquote>
<p>马尔可夫性质: 当前时刻的状态仅与前一时刻的状态和动作有关，与其他时刻的状态和动作条件独立。</p>
</blockquote>
<blockquote>
<p>马尔可夫决策过程（Markov Decision Process, MDP）是序贯决策（sequential decision）的数学模型，用于在系统状态具有马尔可夫性质的环境中模拟智能体可实现的随机性策略与回报</p>
</blockquote>
<p><img src="https://yueqingsheng.github.io/post-images/1592419241042.png" alt="" loading="lazy"><br>
P函数：随机性，转移到另外一种状态的概率<br>
R函数：奖励函数</p>
<h2 id="model-based-vs-model-free">Model-based vs Model-free</h2>
<p>Model based: 如果 P, R 已知，则环境是已知的，可以用动态规划计算最优方案。<br>
Model free: 当解决未知或随机的环境时，即 P, R 未知，可以使用强化学习。</p>
<h2 id="q-函数">Q 函数</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592419978987.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592420512413.png" alt="" loading="lazy"><br>
Q的目标是未来的总收益<br>
<img src="https://yueqingsheng.github.io/post-images/1592420605219.png" alt="" loading="lazy"><br>
但是当时间过长时，需要加一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span></span> 衰减系数，时间越久，对当前的收益影响越小</p>
<h2 id="更新q表格">更新Q表格</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592421245188.png" alt="" loading="lazy"><br>
下个状态的价值可以用来强化上一个状态的价值，如结合食物和铃声一起影响狗的食欲（流口水）。<br>
<img src="https://yueqingsheng.github.io/post-images/1592422219338.jpg" alt="" loading="lazy"><br>
这个公式其实就是把每一步的收益逼近于未来收益之和，即走到这一步获得的总收益。每一次向目标值的方向更新一点。<br>
<img src="https://yueqingsheng.github.io/post-images/1592422876957.png" alt="" loading="lazy"><br>
每次跳转到下一个状态时，通过这些Sarsa参数，便可得知当前状态的Q value。<br>
<img src="https://yueqingsheng.github.io/post-images/1592423174750.png" alt="" loading="lazy"><br>
算法：每走一步，先选出要做的动作。再走下一步，通过状态<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">s_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，从Q表拿到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">a_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 然后通过下一步和上一步的参数更新 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mo>(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">Q(s_1, a_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">Q</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h3 id="如何通过状态-s-去取出动作-a-epsilon-greedy">如何通过状态 s 去取出动作 a ？ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span>-greedy</h3>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592424271702.png" alt="" loading="lazy"></figure>
<h2 id="sarsa-代码">Sarsa 代码</h2>
<p><img src="https://lh6.googleusercontent.com/8jhtLe0-rCvlm69sSpofk5eh3g1hpOmFgBFQPLQKTgw7iUN8d6-mHxrx4JjnQGKI6AwDzpMiePXbNRU1O-NeDy6ER9QWMLjF2IHDDc_BTGKff--BNUZU9iw8QubW3nnBz6Qls7tT" alt="" loading="lazy"><br>
<a href="https://aistudio.baidu.com/aistudio/projectdetail/567852">paddle实现链接</a></p>
<h2 id="off-policy">Off-Policy</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592427661829.png" alt="" loading="lazy"><br>
Off-Policy 不和环境交互</p>
<h2 id="q-learning">Q-learning</h2>
<figure data-type="image" tabindex="2"><img src="https://i.stack.imgur.com/JE6BY.png" alt="" loading="lazy"></figure>
<h2 id="q-learning-vs-sarsa">Q-learning vs Sarsa</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592427877376.png" alt="" loading="lazy"><br>
Q-learning 的下个状态选取使Q最大的action<br>
<img src="https://yueqingsheng.github.io/post-images/1592428118258.png" alt="" loading="lazy"></p>
<h2 id="off-policy-vs-on-policy">Off-Policy vs On-policy</h2>
<blockquote>
<p>policy: 策略是指通过状态 s 去取出动作 a 的 方法/概率。Policy specifies an action 𝑎, that is taken in a state 𝑠 (or more precisely, 𝜋 is a probability, that an action 𝑎 is taken in a state 𝑠).</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592428550500.png" alt="" loading="lazy"></figure>
<blockquote>
<p>行为策略：用来与环境互动收集情报、产生数据的策略，即训练过程中的策略。 π(a|s)<br>
目标策略：在行为策略产生的数据中不断学习和优化得到的策略，即学习训练完毕后拿去做行为评估的策略。µ(a|s)</p>
</blockquote>
<p>区别是</p>
<blockquote>
<p>on-policy 通过的与环境交互的经验更新Q, 按以往经验来。 off-policy 就不管之前经验了，通过任意方式获取action, 比如 greedy。</p>
</blockquote>
<h2 id="总结">总结</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592431533553.png" alt="" loading="lazy"><br>
On policy 对于保留目前探索的成果有好处 ，但容易陷入局部最优。不够冒险。<br>
Off policy 够冒险，容易达到全局最优，但收敛更慢，试错更多，不适合现实中试错成本太大的尝试。</p>
<h2 id="拓展">拓展：</h2>
<p><a href="https://analyticsindiamag.com/reinforcement-learning-policy/">ON-POLICY VS OFF-POLICY REINFORCEMENT LEARNING</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计5 基于地理位置的信息系统（Location based service)]]></title>
        <id>https://yueqingsheng.github.io/post/xi-tong-she-ji-5-ji-yu-di-li-wei-zhi-de-xin-xi-xi-tong-location-based-service/</id>
        <link href="https://yueqingsheng.github.io/post/xi-tong-she-ji-5-ji-yu-di-li-wei-zhi-de-xin-xi-xi-tong-location-based-service/">
        </link>
        <updated>2020-06-12T02:09:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="rpcremote-procedure-call">RPC(remote procedure call)</h2>
<p>不同的机器之间调用函数<br>
http包含了很多验证信息, 不高效</p>
<h2 id="google-s2位置储存-查询系统">Google S2(位置储存 查询系统)</h2>
<p>System design = logic design + infrastructure design(架构设计)</p>
<h2 id="scenario">Scenario</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592234676481.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592235236181.png" alt="" loading="lazy"><br>
收集用户信息，预测打车概率。</p>
<h2 id="service">Service</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592239148033.png" alt="" loading="lazy"></figure>
<h2 id="storage">Storage</h2>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592246122954.png" alt="" loading="lazy"></figure>
<h3 id="trip-table单">Trip Table:（单）</h3>
<p>读多写少 每四秒查一次附近的接单信息</p>
<h3 id="location-table">Location Table:</h3>
<p>读少写多 每四秒写一次driver location</p>
<h2 id="范围查询">范围查询</h2>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592247699767.png" alt="" loading="lazy"></figure>
<h2 id="二维查询映射到一维">二维查询映射到一维</h2>
<h3 id="google-s2">Google S2</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592247980056.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592248137315.png" alt="" loading="lazy"></p>
<h3 id="geohash">Geohash</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592248499067.png" alt="" loading="lazy"><br>
查看公共前缀相似度，32份，<br>
<strong>为什么是 1：2？</strong><br>
4 * 8（180，360）纬经度比<br>
<strong>为什么上下方两行长？</strong><br>
因为地球是圆的，上下占的面积相当于三角形<br>
<strong>为什么是 4*8?</strong><br>
<img src="https://yueqingsheng.github.io/post-images/1592249368751.png" alt="" loading="lazy"><br>
缺陷  ：刚好在线上，线两边差距大</p>
<h4 id="查询-google-半径两公里以内的车">查询 Google 半径两公里以内的车</h4>
<p>geohash LIKE 9q9hv%, %分号在后面，表示以9q9hv开头<br>
<img src="https://yueqingsheng.github.io/post-images/1592249754838.png" alt="" loading="lazy"><br>
Redis value: set 删除 O(1) list 删除O(n)</p>
<h2 id="匹配">匹配</h2>
<figure data-type="image" tabindex="4"><img src="https://yueqingsheng.github.io/post-images/1592251096560.png" alt="" loading="lazy"></figure>
<h2 id="scale">Scale</h2>
<p>迁移成本低，损失成本大。单点 Failure</p>
<h3 id="db-sharding">DB sharding</h3>
<p>按Geo hash 前四位<br>
Uber 使用城市 Sharding</p>
<h4 id="定义城市">定义城市</h4>
<p>Geo Fence<br>
求一个点是否在多边形内<br>
<img src="https://yueqingsheng.github.io/post-images/1592251619394.png" alt="" loading="lazy"><br>
乘客在边界上，记录城市连接关系</p>
<h4 id="机场">机场</h4>
<p>先找到城市，再查询 airport fence</p>
<h5 id="减少风险">减少风险</h5>
<ol>
<li>Master slave</li>
<li>换数据库Riak</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nestjs 统一返回格式]]></title>
        <id>https://yueqingsheng.github.io/post/nestjs-tong-yi-fan-hui-ge-shi/</id>
        <link href="https://yueqingsheng.github.io/post/nestjs-tong-yi-fan-hui-ge-shi/">
        </link>
        <updated>2020-06-11T12:40:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="统一返回格式">统一返回格式</h2>
<p>｛data：object，message：请求成功，code：200｝</p>
<h2 id="成功的格式">成功的格式</h2>
<pre><code class="language-json">{
 &quot;statusCode&quot;: 200,
  &quot;data&quot;: {
    &quot;username&quot;: &quot;string&quot;,
    &quot;access_token&quot;: &quot;XXX&quot;
  },
  &quot;code&quot;: 0,
  &quot;message&quot;: &quot;请求成功&quot;
}
</code></pre>
<h2 id="失败的格式">失败的格式</h2>
<pre><code class="language-json">{
  &quot;statusCode&quot;: 401,
  &quot;data&quot;: {
    &quot;error&quot;: &quot;Client Error&quot;
  },
  &quot;message&quot;: &quot;请求失败&quot;,
  &quot;code&quot;: 1,
  &quot;url&quot;: &quot;/api/auth/profile&quot;
}
</code></pre>
<p>暂定code代表成功，1代表失败，成功data里是返回内容，失败data里是错误信息。</p>
<h1 id="拦截全部的错误请求">拦截全部的错误请求</h1>
<p>src/core/filters/all-exception.filter’;</p>
<pre><code class="language-typescript">import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';
import { Request, Response } from 'express';
@Catch()
export class AllExceptionFilter&lt;T&gt; implements ExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse&lt;Response&gt;();
    const request = ctx.getRequest&lt;Request&gt;();
    const status =
      exception instanceof HttpException
        ? exception.getStatus()
        : HttpStatus.INTERNAL_SERVER_ERROR;

    const message = exception.message.message
      ? exception.message.message
      : `${status &gt;= 500 ? 'Service Error' : 'Client Error'}`;
    const errorResponse = {
      statusCode: status,
      data: { error: message },
      message: '请求失败',
      code: 1, // 自定义code
    };
    // 设置返回的状态码、请求头、发送错误信息
    response.status(status);
    response.header('Content-Type', 'application/json; charset=utf-8');
    response.send(errorResponse);
  }
}
</code></pre>
<h1 id="拦截成功的返回数据">拦截成功的返回数据</h1>
<p>src/core/interceptors/response.interceptor’;</p>
<pre><code class="language-typescript">import {
  CallHandler,
  ExecutionContext,
  Injectable,
  NestInterceptor,
} from '@nestjs/common';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { Response } from 'express';
@Injectable()
export class ResponseInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any&gt; {
    const response = context.switchToHttp().getResponse&lt;Response&gt;();
    console.log(response.statusCode);
    return next.handle().pipe(
      map(data =&gt; {
        return {
          data,
          code: 0,
          message: '请求成功',
          statusCode: response.statusCode,
        };
      }),
    );
  }
}
</code></pre>
<h1 id="全局注册">全局注册</h1>
<p>main.ts</p>
<pre><code class="language-typescript">...
import { TransformInterceptor } from './core/interceptor/transform.interceptor';

async function bootstrap() {
  ...
  // 全局注册拦截器
  app.useGlobalFilters(new AllExceptionFilter());
  app.useGlobalInterceptors(new ResponseInterceptor());
  ...
}
bootstrap();
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计4 API设计和短网址]]></title>
        <id>https://yueqingsheng.github.io/post/xi-tong-she-ji-4-duan-lian-jie/</id>
        <link href="https://yueqingsheng.github.io/post/xi-tong-she-ji-4-duan-lian-jie/">
        </link>
        <updated>2020-06-10T07:55:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="网站系统域名">网站系统，域名</h2>
<h3 id="访问google">访问Google</h3>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592078252769.png" alt="" loading="lazy"></figure>
<ol>
<li>You type maps.google.com into the address bar of your browser.</li>
<li>The browser checks the cache for a DNS record to find the corresponding IP address of maps.google.com.</li>
<li>The browser sends an HTTP request to the webserver.</li>
<li>webserver =&gt; http server(Apache, nginx)</li>
<li>http server =&gt; WebApplication(Django, nodejs)</li>
<li>webapplication response<br>
<img src="https://yueqingsheng.github.io/post-images/1592079735308.png" alt="" loading="lazy"></li>
</ol>
<h2 id="api-设计">API 设计</h2>
<p>直接使用user id是不安全的，正确方式是通过登陆后的token获取id<br>
<img src="https://yueqingsheng.github.io/post-images/1592083213524.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592083280425.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592083338439.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592087205505.png" alt="" loading="lazy"></p>
<h3 id="news-feed-list-web-api">News Feed List Web Api</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592088686604.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592088214530.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592088839355.png" alt="" loading="lazy"></p>
<h3 id="翻页-pagination">翻页 Pagination</h3>
<p>多请求一个 page_size = n + 1, max_id = the last item id, real displayed = n items<br>
<img src="https://yueqingsheng.github.io/post-images/1592090634903.png" alt="" loading="lazy"></p>
<h4 id="refresh">refresh</h4>
<p>find items id &gt; max_id (latest)</p>
<h3 id="mention">Mention</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592114459940.png" alt="" loading="lazy"></figure>
<h4 id="直接返回a缺点">直接返回<a>缺点</h4>
<p><img src="https://yueqingsheng.github.io/post-images/1592114602952.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592114695897.png" alt="" loading="lazy"></p>
<h2 id="短网址">短网址</h2>
<h3 id="service">Service</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592116210957.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592116301504.png" alt="" loading="lazy"></p>
<h3 id="转换算法">转换算法</h3>
<p>随机生成去重<br>
<img src="https://yueqingsheng.github.io/post-images/1592116830654.png" alt="" loading="lazy"></p>
<h4 id="sql">SQL</h4>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1592153139387.png" alt="" loading="lazy"></figure>
<h4 id="nosql">NoSQL</h4>
<figure data-type="image" tabindex="4"><img src="https://yueqingsheng.github.io/post-images/1592153194128.png" alt="" loading="lazy"></figure>
<h3 id="scale">Scale</h3>
<h4 id="优化-response-time">优化 response time</h4>
<ol>
<li>Use Cache</li>
<li>地理位置提速<br>
centralized mysql + distributed memcached<br>
<img src="https://yueqingsheng.github.io/post-images/1592163807150.png" alt="" loading="lazy"></li>
</ol>
<h3 id="一台数据库服务器搞不定">一台数据库服务器搞不定</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592185289011.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592185509180.png" alt="" loading="lazy"></p>
<h2 id="练习-custom-url-自定义链接-转-longurl">练习 Custom url (自定义链接 转 longurl)</h2>
<p>自增Id法： 单独创建一个 cutsom url -&gt; longurl 数据表<br>
随机生成法： 直接存储 custom url</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计 3 sharding&hash]]></title>
        <id>https://yueqingsheng.github.io/post/xi-tong-she-ji-3-databaseandhash/</id>
        <link href="https://yueqingsheng.github.io/post/xi-tong-she-ji-3-databaseandhash/">
        </link>
        <updated>2020-06-07T15:56:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="scale">Scale</h2>
<h3 id="qps">QPS</h3>
<h3 id="single-point-failure一台服务器挂">Single point failure(一台服务器挂)</h3>
<h4 id="sharding-数据拆分">sharding 数据拆分</h4>
<ol>
<li>解决 single point failure</li>
<li>分摊流量</li>
</ol>
<h4 id="replica-数据复制">replica 数据复制</h4>
<ol>
<li>数据恢复</li>
<li>分摊流量</li>
</ol>
<h2 id="数据库拆分">数据库拆分</h2>
<h2 id="竖向拆分">竖向拆分</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591722453484.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591722492145.png" alt="" loading="lazy"><br>
缺点： 当表单特别大，column无法拆分时无法用</p>
<h2 id="横向拆分">横向拆分</h2>
<p><strong>新数据放新机器，老数据放老机器的问题是什么？</strong><br>
根据数据的新旧程度来拆分的话，新数据的访问次数比旧数据的访问次数是要明显多的，会导致数据访问不均匀的问题。<br>
这种方法并不会导致存储不均匀，最多只有最新的一台机器的数据相对少一些，其他的机器都还是均匀的。也不会导致不知道数据去哪台机器取，比如根据 id 来拆分，0~99在1号机器，1-199 在2号机器的话，根据 id 可以算出对应的机器是哪个<br>
<img src="https://yueqingsheng.github.io/post-images/1591722936674.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591722974334.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591723056231.png" alt="" loading="lazy"><br>
75%的数据迁移</p>
<h2 id="一致性哈希算法">一致性哈希算法</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591724662966.png" alt="" loading="lazy"><br>
匀走相邻两台机器的一部分数据</p>
<h3 id="缺陷">缺陷：</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1591724873965.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591724909043.png" alt="" loading="lazy"></p>
<h2 id="改进">改进：</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591725237232.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591725356209.png" alt="" loading="lazy"><br>
红黑树（balanced tree）</p>
<h2 id="数据复制-replica">数据复制 Replica</h2>
<h3 id="replica-vs-backup">Replica vs Backup</h3>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1591725861122.png" alt="" loading="lazy"></figure>
<h3 id="sql">SQL</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1591725986397.png" alt="" loading="lazy"></figure>
<h3 id="nosql">NoSQL</h3>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1591726102538.png" alt="" loading="lazy"></figure>
<h2 id="实战1user-table-sharding">实战1：User Table Sharding</h2>
<p>怎么取数据就怎么拆数据库<br>
按照 username找用户 查username-&gt;id表<br>
<img src="https://yueqingsheng.github.io/post-images/1591752365390.png" alt="" loading="lazy"></p>
<h2 id="实战2friendship-table-sharding">实战2：Friendship Table Sharding</h2>
<p>双向好友关系，必须存两条关系</p>
<h2 id="实战4-news-feedtimeline-sharding">实战4： News Feed/Timeline Sharding</h2>
<p>owner id/userid</p>
<h2 id="实战5-lintcode-submission-userproblemstatus">实战5： LintCode Submission (user/problem/status)</h2>
<figure data-type="image" tabindex="4"><img src="https://yueqingsheng.github.io/post-images/1591753013575.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[随想]]></title>
        <id>https://yueqingsheng.github.io/post/sui-xiang 2/</id>
        <link href="https://yueqingsheng.github.io/post/sui-xiang 2/">
        </link>
        <updated>2020-06-07T05:36:42.000Z</updated>
        <summary type="html"><![CDATA[<p>会记录一些突然想到的想法到这里</p>
]]></summary>
        <content type="html"><![CDATA[<p>会记录一些突然想到的想法到这里</p>
<!-- more -->
<h3 id="开会">开会</h3>
<p>会议中有太多的干扰项，具体实现的方案应该放在会议前去做。多人的交流和干扰，反而会使想出一个好的解决方案的效率降低。</p>
<h3 id="项目宏伟的缺陷">项目宏伟的缺陷</h3>
<p>一些宏伟项目想法在提出来的时候，可能会很好。但是应该在每部分的实现逻辑（细节）尽可能完善后（想出来，或者demo实现一下），再招聘程序员去做。</p>
<h3 id="bug解决方案">bug解决方案</h3>
<p>当卡在某个bug自己短时间内无法解决时，或找不到原因，最有效率的方式是去搜索这个问题，查看别人是怎么解决的。</p>
<h3 id="时间规划">时间规划</h3>
<p>可以给计划设个下限和上限，以避免规划没达到的心里落差。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jupyter]]></title>
        <id>https://yueqingsheng.github.io/post/jupyter/</id>
        <link href="https://yueqingsheng.github.io/post/jupyter/">
        </link>
        <updated>2020-06-03T07:31:05.000Z</updated>
        <content type="html"><![CDATA[<h2 id="自动输出多行">自动输出多行</h2>
<p>from IPython.core.interactiveshell import InteractiveShell<br>
InteractiveShell.ast_node_interactivity = &quot;all&quot;</p>
<h2 id="安装包-can-not-find-module">安装包 can not find module</h2>
<p>import sys<br>
!{sys.executable} -m pip install pypinyin</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计 Week 2 Database&Cache(数据库和缓存)]]></title>
        <id>https://yueqingsheng.github.io/post/xi-tong-she-ji-week-2-databaseandcacheshu-ju-ku-he-huan-cun/</id>
        <link href="https://yueqingsheng.github.io/post/xi-tong-she-ji-week-2-databaseandcacheshu-ju-ku-he-huan-cun/">
        </link>
        <updated>2020-06-02T20:51:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="用户系统">用户系统</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1591478153289.png" alt="" loading="lazy"></figure>
<h2 id="scenarioqpsservice">Scenario(QPS)&amp;Service</h2>
<p>QPS = DAU*用户平均每天请求次数/每天多少秒（86400）<br>
<img src="https://yueqingsheng.github.io/post-images/1591552259685.png" alt="" loading="lazy"></p>
<h3 id="qps与数据存储">QPS与数据存储</h3>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1591552392966.png" alt="" loading="lazy"></figure>
<h2 id="cache读多写少">Cache（读多写少）</h2>
<p>File system 可以作为网络请求和计算结果的cache<br>
跟hashmap区别，cache有淘汰机制（LRU，LSU）<br>
<img src="https://yueqingsheng.github.io/post-images/1591559774530.png" alt="" loading="lazy"><br>
ttl: time to live<br>
<img src="https://yueqingsheng.github.io/post-images/1591593445593.png" alt="" loading="lazy"></p>
<h3 id="set-user">Set User</h3>
<p>cache delete, database set.有可能第二个<br>
<img src="https://yueqingsheng.github.io/post-images/1591593695552.png" alt="" loading="lazy"><br>
多线程下，可能造成数据不一致。<br>
当执行完cache delete, 另外线程get user  获取了旧数据（cache）, 再执行database set (新数据-&gt;数据不一致<br>
<img src="https://yueqingsheng.github.io/post-images/1591594170682.png" alt="" loading="lazy"><br>
加锁（不同机器，系统)</p>
<h4 id="常用方法">常用方法</h4>
<p>database.set, cache.delete<br>
<img src="https://yueqingsheng.github.io/post-images/1591633218358.png" alt="" loading="lazy"><br>
同时用 set set, 多进程会有修改数据库情况，然后缓存set旧的data<br>
第一种情况因为读多改少，出现概率低。cache hit 概率大，通常&gt;98%</p>
<h3 id="如何解决一致性-问题">如何解决一致性 问题</h3>
<p>ttl(time to live) 允许短时间的不一致</p>
<h3 id="读少写多-多用数据库分摊请求">读少写多 （多用数据库，分摊请求）</h3>
<h4 id="cache-架构">Cache 架构</h4>
<p><img src="https://yueqingsheng.github.io/post-images/1591633744350.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591633807994.png" alt="" loading="lazy"></p>
<h2 id="登录系统">登录系统</h2>
<figure data-type="image" tabindex="3"><img src="https://yueqingsheng.github.io/post-images/1591637241224.png" alt="" loading="lazy"></figure>
<blockquote>
<p>UUID:通常用UUID来作为Session Key(Session Token)，UUID(Universal Unique ID): UUID是由一组32位数的16进制数字所构成，所以UUID理论上的总数为16<sup>32=2</sup>128，约等于3.4 x 10^38。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完。所以通俗的称之为宇宙爆炸都不会出现重复的ID字段。<br>
<img src="https://yueqingsheng.github.io/post-images/1591637779482.png" alt="" loading="lazy"><br>
Cookie里内容越少越好</p>
</blockquote>
<h3 id="只允许一台机器登录">只允许一台机器登录</h3>
<p>存储device token, 监测到不同device, 把其他设备账户logout</p>
<h2 id="好友关系">好友关系</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591638752848.png" alt="" loading="lazy"><br>
方案1:<br>
优点：只存储1条数据，节省一半空间。（当你要存 1 和 2 是好友的时候，你可能存为 &lt;1,2&gt; 也可能存为 &lt;2,1&gt;。我们只存成 &lt;1,2&gt; 的形式，原因有两个，第一是方便查询，否则你查询的时候得分别差 &lt;1,2&gt; 是否存在和 &lt;2,1&gt; 是否存在。第二个是节省一半的存储空间。）<br>
缺点： 查询时 or 操作慢一些<br>
方案2:<br>
优点： 查询语句简单，查询速度快。空间换取时间</p>
<blockquote>
<p>Transaction: 事务。代表一些列操作要打包在一起，同时成果或者同时失败。比如我转你 10 块钱，你的余额要 +10，我的余额要 -10。这是两条数据库操作，必须同时成功或者同时失败。不能只有一条操作成功。这种打包，就叫做 Transaction。</p>
</blockquote>
<h2 id="nosqlcassandra">NoSQL(Cassandra)</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591639493129.png" alt="" loading="lazy"><br>
Row key: 存储到哪台机器的索引，nosql 用于分布式<br>
<img src="https://yueqingsheng.github.io/post-images/1591643551418.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591645626931.png" alt="" loading="lazy"><br>
Column key: 支持范围查询 和 复合值查询</p>
<h2 id="nosql-vs-sql">NoSQL VS SQL</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1591649259941.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1591649307923.png" alt="" loading="lazy"></p>
<h3 id="选择原则">选择原则：</h3>
<ol>
<li>transaction 不能选NoSQL(通常在一台机器完成)</li>
<li>擅长部分</li>
<li>一个网站会使用多种数据库<br>
<img src="https://yueqingsheng.github.io/post-images/1591649707668.png" alt="" loading="lazy"></li>
</ol>
<h2 id="nosql-存单向好友关系">NoSql 存单向好友关系</h2>
<figure data-type="image" tabindex="4"><img src="https://yueqingsheng.github.io/post-images/1591751464392.png" alt="" loading="lazy"></figure>
<h2 id="nosql-存储user">NoSql 存储User</h2>
<p>根据 emial/phone/username查询<br>
<img src="https://yueqingsheng.github.io/post-images/1591751772270.png" alt="" loading="lazy"></p>
<h2 id="共同好友">共同好友</h2>
<p>A userid B userid =&gt; A和B交集<br>
<img src="https://yueqingsheng.github.io/post-images/1591751952888.png" alt="" loading="lazy"></p>
<h2 id="六度关系">六度关系</h2>
<figure data-type="image" tabindex="5"><img src="https://yueqingsheng.github.io/post-images/1591752010561.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python cheatsheet]]></title>
        <id>https://yueqingsheng.github.io/post/python-cheatsheet/</id>
        <link href="https://yueqingsheng.github.io/post/python-cheatsheet/">
        </link>
        <updated>2020-06-01T07:05:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="comprehensive-python-cheatsheet">Comprehensive Python Cheatsheet</h1>
<p><sup><a href="https://raw.githubusercontent.com/gto76/python-cheatsheet/master/README.md">Download text file</a>, <a href="https://transactions.sendowl.com/products/78175486/4422834F/view">Buy PDF</a>, <a href="https://github.com/gto76/python-cheatsheet">Fork me on GitHub</a> or <a href="https://github.com/gto76/python-cheatsheet/wiki/Frequently-Asked-Questions">Check out FAQ</a>.<br>
</sup></p>
<figure data-type="image" tabindex="1"><img src="https://github.com/gto76/python-cheatsheet/blob/master/web/image_888.jpeg?raw=true" alt="Monty Python" loading="lazy"></figure>
<h2 id="contents">Contents</h2>
<p><strong>   </strong> <strong>1. Collections:</strong> <strong> </strong> <strong><a href="#list"><code>List</code></a></strong><strong>,</strong> <strong><a href="#dictionary"><code>Dictionary</code></a></strong><strong>,</strong> <strong><a href="#set"><code>Set</code></a></strong><strong>,</strong> <strong><a href="#tuple"><code>Tuple</code></a></strong><strong>,</strong> <strong><a href="#range"><code>Range</code></a></strong><strong>,</strong> <strong><a href="#enumerate"><code>Enumerate</code></a></strong><strong>,</strong> <strong><a href="#iterator"><code>Iterator</code></a></strong><strong>,</strong> <strong><a href="#generator"><code>Generator</code></a></strong><strong>.</strong><br>
<strong>   </strong> <strong>2. Types:</strong> <strong>          </strong>  <strong><a href="#type"><code>Type</code></a></strong><strong>,</strong> <strong><a href="#string"><code>String</code></a></strong><strong>,</strong> <strong><a href="#regex"><code>Regular_Exp</code></a></strong><strong>,</strong> <strong><a href="#format"><code>Format</code></a></strong><strong>,</strong> <strong><a href="#numbers"><code>Numbers</code></a></strong><strong>,</strong> <strong><a href="#combinatorics"><code>Combinatorics</code></a></strong><strong>,</strong> <strong><a href="#datetime"><code>Datetime</code></a></strong><strong>.</strong><br>
<strong>   </strong> <strong>3. Syntax:</strong> <strong>         </strong>  <strong><a href="#arguments"><code>Args</code></a></strong><strong>,</strong> <strong><a href="#inline"><code>Inline</code></a></strong><strong>,</strong> <strong><a href="#closure"><code>Closure</code></a></strong><strong>,</strong> <strong><a href="#decorator"><code>Decorator</code></a></strong><strong>,</strong> <strong><a href="#class"><code>Class</code></a></strong><strong>,</strong> <strong><a href="#duck-types"><code>Duck_Type</code></a></strong><strong>,</strong> <strong><a href="#enum"><code>Enum</code></a></strong><strong>,</strong> <strong><a href="#exceptions"><code>Exception</code></a></strong><strong>.</strong><br>
<strong>   </strong> <strong>4. System:</strong> <strong>        </strong>  <strong><a href="#exit"><code>Exit</code></a></strong><strong>,</strong> <strong><a href="#print"><code>Print</code></a></strong><strong>,</strong> <strong><a href="#input"><code>Input</code></a></strong><strong>,</strong> <strong><a href="#command-line-arguments"><code>Command_Line_Arguments</code></a></strong><strong>,</strong> <strong><a href="#open"><code>Open</code></a></strong><strong>,</strong> <strong><a href="#path"><code>Path</code></a></strong><strong>,</strong> <strong><a href="#oscommands"><code>OS_Commands</code></a></strong><strong>.</strong><br>
<strong>   </strong> <strong>5. Data:</strong> <strong>             </strong>  <strong><a href="#json"><code>JSON</code></a></strong><strong>,</strong> <strong><a href="#pickle"><code>Pickle</code></a></strong><strong>,</strong> <strong><a href="#csv"><code>CSV</code></a></strong><strong>,</strong> <strong><a href="#sqlite"><code>SQLite</code></a></strong><strong>,</strong> <strong><a href="#bytes"><code>Bytes</code></a></strong><strong>,</strong> <strong><a href="#struct"><code>Struct</code></a></strong><strong>,</strong> <strong><a href="#array"><code>Array</code></a></strong><strong>,</strong> <strong><a href="#memory-view"><code>Memory_View</code></a></strong><strong>,</strong> <strong><a href="#deque"><code>Deque</code></a></strong><strong>.</strong><br>
<strong>   </strong> <strong>6. Advanced:</strong> <strong>   </strong>  <strong><a href="#threading"><code>Threading</code></a></strong><strong>,</strong> <strong><a href="#operator"><code>Operator</code></a></strong><strong>,</strong> <strong><a href="#introspection"><code>Introspection</code></a></strong><strong>,</strong> <strong><a href="#metaprograming"><code>Metaprograming</code></a></strong><strong>,</strong> <strong><a href="#eval"><code>Eval</code></a></strong><strong>,</strong> <strong><a href="#coroutines"><code>Coroutines</code></a></strong><strong>.</strong><br>
<strong>   </strong> <strong>7. Libraries:</strong> <strong>      </strong>  <strong><a href="#progress-bar"><code>Progress_Bar</code></a></strong><strong>,</strong> <strong><a href="#plot"><code>Plot</code></a></strong><strong>,</strong> <strong><a href="#table"><code>Table</code></a></strong><strong>,</strong> <strong><a href="#curses"><code>Curses</code></a></strong><strong>,</strong> <strong><a href="#logging"><code>Logging</code></a></strong><strong>,</strong> <strong><a href="#scraping"><code>Scraping</code></a></strong><strong>,</strong> <strong><a href="#web"><code>Web</code></a></strong><strong>,</strong> <strong><a href="#profiling"><code>Profile</code></a></strong><strong>,</strong><br>
<strong>                                 </strong> <strong><a href="#numpy"><code>NumPy</code></a></strong><strong>,</strong> <strong><a href="#image"><code>Image</code></a></strong><strong>,</strong> <strong><a href="#audio"><code>Audio</code></a></strong><strong>,</strong> <strong><a href="#pygame"><code>Pygame</code></a></strong><strong>.</strong></p>
<h2 id="main">Main</h2>
<pre><code class="language-python">if __name__ == '__main__':     # Runs main() if file wasn't imported.
    main()
</code></pre>
<h2 id="list">List</h2>
<pre><code class="language-python">&lt;list&gt; = &lt;list&gt;[from_inclusive : to_exclusive : ±step_size]
</code></pre>
<pre><code class="language-python">&lt;list&gt;.append(&lt;el&gt;)            # Or: &lt;list&gt; += [&lt;el&gt;]
&lt;list&gt;.extend(&lt;collection&gt;)    # Or: &lt;list&gt; += &lt;collection&gt;
</code></pre>
<pre><code class="language-python">&lt;list&gt;.sort()
&lt;list&gt;.reverse()
&lt;list&gt; = sorted(&lt;collection&gt;)
&lt;iter&gt; = reversed(&lt;list&gt;)
</code></pre>
<pre><code class="language-python">sum_of_elements  = sum(&lt;collection&gt;)
elementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]
sorted_by_second = sorted(&lt;collection&gt;, key=lambda el: el[1])
sorted_by_both   = sorted(&lt;collection&gt;, key=lambda el: (el[1], el[0]))
flatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))
product_of_elems = functools.reduce(lambda out, el: out * el, &lt;collection&gt;)
list_of_chars    = list(&lt;str&gt;)
</code></pre>
<ul>
<li><strong>Module <a href="#operator">operator</a> provides functions itemgetter() and mul() that offer the same functionality as <a href="#lambda">lambda</a> expressions above.</strong></li>
</ul>
<pre><code class="language-python">&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)     # Returns number of occurrences. Also works on strings.
index = &lt;list&gt;.index(&lt;el&gt;)     # Returns index of first occurrence or raises ValueError.
&lt;list&gt;.insert(index, &lt;el&gt;)     # Inserts item at index and moves the rest to the right.
&lt;el&gt; = &lt;list&gt;.pop([index])     # Removes and returns item at index or from the end.
&lt;list&gt;.remove(&lt;el&gt;)            # Removes first occurrence of item or raises ValueError.
&lt;list&gt;.clear()                 # Removes all items. Also works on dictionary and set.
</code></pre>
<h2 id="dictionary">Dictionary</h2>
<pre><code class="language-python">&lt;view&gt; = &lt;dict&gt;.keys()                          # Coll. of keys that reflects changes.
&lt;view&gt; = &lt;dict&gt;.values()                        # Coll. of values that reflects changes.
&lt;view&gt; = &lt;dict&gt;.items()                         # Coll. of key-value tuples that reflects chgs.
</code></pre>
<pre><code class="language-python">value  = &lt;dict&gt;.get(key, default=None)          # Returns default if key is missing.
value  = &lt;dict&gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.
&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        # Creates a dict with default value of type.
&lt;dict&gt; = collections.defaultdict(lambda: 1)     # Creates a dict with default value 1.
</code></pre>
<pre><code class="language-python">&lt;dict&gt; = dict(&lt;collection&gt;)                     # Creates a dict from coll. of key-value pairs.
&lt;dict&gt; = dict(zip(keys, values))                # Creates a dict from two collections.
&lt;dict&gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.
</code></pre>
<pre><code class="language-python">&lt;dict&gt;.update(&lt;dict&gt;)                           # Adds items. Replaces ones with matching keys.
value = &lt;dict&gt;.pop(key)                         # Removes item or raises KeyError.
{k for k, v in &lt;dict&gt;.items() if v == value}    # Returns set of keys that point to the value.
{k: v for k, v in &lt;dict&gt;.items() if k in keys}  # Returns a dictionary, filtered by keys.
</code></pre>
<h3 id="counter">Counter</h3>
<pre><code class="language-python">&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; colors = ['blue', 'blue', 'blue', 'red', 'red']
&gt;&gt;&gt; counter = Counter(colors)
&gt;&gt;&gt; counter['yellow'] += 1
Counter({'blue': 3, 'red': 2, 'yellow': 1})
&gt;&gt;&gt; counter.most_common()[0]
('blue', 3)
</code></pre>
<h2 id="set">Set</h2>
<pre><code class="language-python">&lt;set&gt; = set()
</code></pre>
<pre><code class="language-python">&lt;set&gt;.add(&lt;el&gt;)                                 # Or: &lt;set&gt; |= {&lt;el&gt;}
&lt;set&gt;.update(&lt;collection&gt;)                      # Or: &lt;set&gt; |= &lt;set&gt;
</code></pre>
<pre><code class="language-python">&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   # Or: &lt;set&gt; | &lt;set&gt;
&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            # Or: &lt;set&gt; &amp; &lt;set&gt;
&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              # Or: &lt;set&gt; - &lt;set&gt;
&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    # Or: &lt;set&gt; ^ &lt;set&gt;
&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                # Or: &lt;set&gt; &lt;= &lt;set&gt;
&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              # Or: &lt;set&gt; &gt;= &lt;set&gt;
</code></pre>
<pre><code class="language-python">&lt;el&gt; = &lt;set&gt;.pop()                              # Raises KeyError if empty.
&lt;set&gt;.remove(&lt;el&gt;)                              # Raises KeyError if missing.
&lt;set&gt;.discard(&lt;el&gt;)                             # Doesn't raise an error.
</code></pre>
<h3 id="frozen-set">Frozen Set</h3>
<ul>
<li><strong>Is immutable and hashable.</strong></li>
<li><strong>That means it can be used as a key in a dictionary or as an element in a set.</strong></li>
</ul>
<pre><code class="language-python">&lt;frozenset&gt; = frozenset(&lt;collection&gt;)
</code></pre>
<h2 id="tuple">Tuple</h2>
<p><strong>Tuple is an immutable and hashable list.</strong></p>
<pre><code class="language-python">&lt;tuple&gt; = ()
&lt;tuple&gt; = (&lt;el&gt;, )
&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])
</code></pre>
<h3 id="named-tuple">Named Tuple</h3>
<p><strong>Tuple's subclass with named elements.</strong></p>
<pre><code class="language-python">&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Point = namedtuple('Point', 'x y')
&gt;&gt;&gt; p = Point(1, y=2)
Point(x=1, y=2)
&gt;&gt;&gt; p[0]
1
&gt;&gt;&gt; p.x
1
&gt;&gt;&gt; getattr(p, 'y')
2
&gt;&gt;&gt; p._fields  # Or: Point._fields
('x', 'y')
</code></pre>
<h2 id="range">Range</h2>
<pre><code class="language-python">&lt;range&gt; = range(to_exclusive)
&lt;range&gt; = range(from_inclusive, to_exclusive)
&lt;range&gt; = range(from_inclusive, to_exclusive, ±step_size)
</code></pre>
<pre><code class="language-python">from_inclusive = &lt;range&gt;.start
to_exclusive   = &lt;range&gt;.stop
</code></pre>
<h2 id="enumerate">Enumerate</h2>
<pre><code class="language-python">for i, el in enumerate(&lt;collection&gt; [, i_start]):
    ...
</code></pre>
<h2 id="iterator">Iterator</h2>
<pre><code class="language-python">&lt;iter&gt; = iter(&lt;collection&gt;)                 # `iter(&lt;iter&gt;)` returns unmodified iterator.
&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)     # A sequence of return values until 'to_exclusive'.
&lt;el&gt;   = next(&lt;iter&gt; [, default])           # Raises StopIteration or returns 'default' on end.
&lt;list&gt; = list(&lt;iter&gt;)                       # Returns a list of iterator's remaining elements.
</code></pre>
<h3 id="itertools">Itertools</h3>
<pre><code class="language-python">from itertools import count, repeat, cycle, chain, islice
</code></pre>
<pre><code class="language-python">&lt;iter&gt; = count(start=0, step=1)             # Returns updated value endlessly. Accepts floats.
&lt;iter&gt; = repeat(&lt;el&gt; [, times])             # Returns element endlessly or 'times' times.
&lt;iter&gt; = cycle(&lt;collection&gt;)                # Repeats the sequence endlessly.
</code></pre>
<pre><code class="language-python">&lt;iter&gt; = chain(&lt;coll_1&gt;, &lt;coll_2&gt; [, ...])  # Empties collections in order.
&lt;iter&gt; = chain.from_iterable(&lt;collection&gt;)  # Empties collections inside a collection in order.
</code></pre>
<pre><code class="language-python">&lt;iter&gt; = islice(&lt;collection&gt;, to_exclusive)
&lt;iter&gt; = islice(&lt;collection&gt;, from_inclusive, to_exclusive [, +step_size])
</code></pre>
<h2 id="generator">Generator</h2>
<ul>
<li><strong>Any function that contains a yield statement returns a generator.</strong></li>
<li><strong>Generators and iterators are interchangeable.</strong></li>
</ul>
<pre><code class="language-python">def count(start, step):
    while True:
        yield start
        start += step
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; counter = count(10, 2)
&gt;&gt;&gt; next(counter), next(counter), next(counter)
(10, 12, 14)
</code></pre>
<h2 id="type">Type</h2>
<ul>
<li><strong>Everything is an object.</strong></li>
<li><strong>Every object has a type.</strong></li>
<li><strong>Type and class are synonymous.</strong></li>
</ul>
<pre><code class="language-python">&lt;type&gt; = type(&lt;el&gt;)                          # Or: &lt;el&gt;.__class__
&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            # Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; type('a'), 'a'.__class__, str
(&lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;)
</code></pre>
<h4 id="some-types-do-not-have-built-in-names-so-they-must-be-imported">Some types do not have built-in names, so they must be imported:</h4>
<pre><code class="language-python">from types import FunctionType, MethodType, LambdaType, GeneratorType
</code></pre>
<h3 id="abstract-base-classes">Abstract Base Classes</h3>
<p><strong>Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not.</strong></p>
<pre><code class="language-python">&gt;&gt;&gt; from collections.abc import Sequence, Collection, Iterable
&gt;&gt;&gt; isinstance([1, 2, 3], Iterable)
True
</code></pre>
<pre><code class="language-text">+------------------+------------+------------+------------+
|                  |  Sequence  | Collection |  Iterable  |
+------------------+------------+------------+------------+
| list, range, str |    yes     |    yes     |    yes     |
| dict, set        |            |    yes     |    yes     |
| iter             |            |            |    yes     |
+------------------+------------+------------+------------+
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; from numbers import Integral, Rational, Real, Complex, Number
&gt;&gt;&gt; isinstance(123, Number)
True
</code></pre>
<pre><code class="language-text">+--------------------+----------+----------+----------+----------+----------+
|                    | Integral | Rational |   Real   | Complex  |  Number  |
+--------------------+----------+----------+----------+----------+----------+
| int                |   yes    |   yes    |   yes    |   yes    |   yes    |
| fractions.Fraction |          |   yes    |   yes    |   yes    |   yes    |
| float              |          |          |   yes    |   yes    |   yes    |
| complex            |          |          |          |   yes    |   yes    |
| decimal.Decimal    |          |          |          |          |   yes    |
+--------------------+----------+----------+----------+----------+----------+
</code></pre>
<h2 id="string">String</h2>
<pre><code class="language-python">&lt;str&gt;  = &lt;str&gt;.strip()                       # Strips all whitespace characters from both ends.
&lt;str&gt;  = &lt;str&gt;.strip('&lt;chars&gt;')              # Strips all passed characters from both ends.
</code></pre>
<pre><code class="language-python">&lt;list&gt; = &lt;str&gt;.split()                       # Splits on one or more whitespace characters.
&lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1)  # Splits on 'sep' str at most 'maxsplit' times.
&lt;list&gt; = &lt;str&gt;.splitlines(keepends=False)    # Splits on \n,\r,\r\n. Keeps them if 'keepends'.
&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       # Joins elements using string as separator.
</code></pre>
<pre><code class="language-python">&lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt;                  # Checks if string contains a substring.
&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         # Pass tuple of strings for multiple options.
&lt;bool&gt; = &lt;str&gt;.endswith(&lt;sub_str&gt;)           # Pass tuple of strings for multiple options.
&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               # Returns start index of first match or -1.
&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              # Same but raises ValueError if missing.
</code></pre>
<pre><code class="language-python">&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   # Replaces 'old' with 'new' at most 'count' times.
&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            # Use `str.maketrans(&lt;dict&gt;)` to generate table.
</code></pre>
<pre><code class="language-python">&lt;str&gt;  = chr(&lt;int&gt;)                          # Converts int to Unicode char.
&lt;int&gt;  = ord(&lt;str&gt;)                          # Converts Unicode char to int.
</code></pre>
<ul>
<li><strong>Also: <code>'lstrip()'</code>, <code>'rstrip()'</code>.</strong></li>
<li><strong>Also: <code>'lower()'</code>, <code>'upper()'</code>, <code>'capitalize()'</code> and <code>'title()'</code>.</strong></li>
</ul>
<h3 id="property-methods">Property Methods</h3>
<pre><code class="language-text">+---------------+----------+----------+----------+----------+----------+
|               | [ !#$%…] | [a-zA-Z] |  [¼½¾]   |  [²³¹]   |  [0-9]   |
+---------------+----------+----------+----------+----------+----------+
| isprintable() |   yes    |   yes    |   yes    |   yes    |   yes    |
| isalnum()     |          |   yes    |   yes    |   yes    |   yes    |
| isnumeric()   |          |          |   yes    |   yes    |   yes    |
| isdigit()     |          |          |          |   yes    |   yes    |
| isdecimal()   |          |          |          |          |   yes    |
+---------------+----------+----------+----------+----------+----------+
</code></pre>
<ul>
<li><strong>Also: <code>'isspace()'</code> checks for <code>'[ \t\n\r\f\v…]'</code>.</strong></li>
</ul>
<h2 id="regex">Regex</h2>
<pre><code class="language-python">import re
&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=0)  # Substitutes all occurrences with 'new'.
&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            # Returns all occurrences as strings.
&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=0)  # Use brackets in regex to include the matches.
&lt;Match&gt; = re.search(&lt;regex&gt;, text)             # Searches for first occurrence of the pattern.
&lt;Match&gt; = re.match(&lt;regex&gt;, text)              # Searches only at the beginning of the text.
&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           # Returns all occurrences as match objects.
</code></pre>
<ul>
<li><strong>Search() and match() return None if they can't find a match.</strong></li>
<li><strong>Argument <code>'flags=re.IGNORECASE'</code> can be used with all functions.</strong></li>
<li><strong>Argument <code>'flags=re.MULTILINE'</code> makes <code>'^'</code> and <code>'$'</code> match the start/end of each line.</strong></li>
<li><strong>Argument <code>'flags=re.DOTALL'</code> makes dot also accept the <code>'\n'</code>.</strong></li>
<li><strong>Use <code>r'\1'</code> or <code>'\\1'</code> for backreference.</strong></li>
<li><strong>Add <code>'?'</code> after an operator to make it non-greedy.</strong></li>
</ul>
<h3 id="match-object">Match Object</h3>
<pre><code class="language-python">&lt;str&gt;   = &lt;Match&gt;.group()                      # Returns the whole match. Also group(0).
&lt;str&gt;   = &lt;Match&gt;.group(1)                     # Returns part in the first bracket.
&lt;tuple&gt; = &lt;Match&gt;.groups()                     # Returns all bracketed parts.
&lt;int&gt;   = &lt;Match&gt;.start()                      # Returns start index of the match.
&lt;int&gt;   = &lt;Match&gt;.end()                        # Returns exclusive end index of the match.
</code></pre>
<h3 id="special-sequences">Special Sequences</h3>
<ul>
<li><strong>By default digits, alphanumerics and whitespaces from all alphabets are matched, unless <code>'flags=re.ASCII'</code> argument is used.</strong></li>
<li><strong>Use a capital letter for negation.</strong></li>
</ul>
<pre><code class="language-python">'\d' == '[0-9]'                                # Matches any digit.
'\w' == '[a-zA-Z0-9_]'                         # Matches any alphanumeric.
'\s' == '[ \t\n\r\f\v]'                        # Matches any whitespace.
</code></pre>
<h2 id="format">Format</h2>
<pre><code class="language-python">&lt;str&gt; = f'{&lt;el_1&gt;}, {&lt;el_2&gt;}'
&lt;str&gt; = '{}, {}'.format(&lt;el_1&gt;, &lt;el_2&gt;)
</code></pre>
<h3 id="attributes">Attributes</h3>
<pre><code class="language-python">&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Person = namedtuple('Person', 'name height')
&gt;&gt;&gt; person = Person('Jean-Luc', 187)
&gt;&gt;&gt; f'{person.height}'
'187'
&gt;&gt;&gt; '{p.height}'.format(p=person)
'187'
</code></pre>
<h3 id="general-options">General Options</h3>
<pre><code class="language-python">{&lt;el&gt;:&lt;10}                                     # '&lt;el&gt;      '
{&lt;el&gt;:^10}                                     # '   &lt;el&gt;   '
{&lt;el&gt;:&gt;10}                                     # '      &lt;el&gt;'
{&lt;el&gt;:.&lt;10}                                    # '&lt;el&gt;......'
{&lt;el&gt;:&lt;0}                                      # '&lt;el&gt;'
</code></pre>
<h3 id="strings">Strings</h3>
<p><strong><code>'!r'</code> calls object's <a href="#class">repr()</a> method, instead of <a href="#class">str()</a>, to get a string.</strong></p>
<pre><code class="language-python">{'abcde'!r:10}                                 # &quot;'abcde'   &quot;
{'abcde':10.3}                                 # 'abc       '
{'abcde':.3}                                   # 'abc'
</code></pre>
<h3 id="numbers">Numbers</h3>
<pre><code class="language-python">{ 123456:10,}                                  # '   123,456'
{ 123456:10_}                                  # '   123_456'
{ 123456:+10}                                  # '   +123456'
{-123456:=10}                                  # '-   123456'
{ 123456: }                                    # ' 123456'
{-123456: }                                    # '-123456'
</code></pre>
<h3 id="floats">Floats</h3>
<pre><code class="language-python">{1.23456:10.3}                                 # '      1.23'
{1.23456:10.3f}                                # '     1.235'
{1.23456:10.3e}                                # ' 1.235e+00'
{1.23456:10.3%}                                # '  123.456%'
</code></pre>
<h4 id="comparison-of-presentation-types">Comparison of presentation types:</h4>
<pre><code class="language-text">+---------------+-----------------+-----------------+-----------------+-----------------+
|               |    {&lt;float&gt;}    |   {&lt;float&gt;:f}   |   {&lt;float&gt;:e}   |   {&lt;float&gt;:%}   |
+---------------+-----------------+-----------------+-----------------+-----------------+
|   0.000056789 |    '5.6789e-05' |     '0.000057'  |  '5.678900e-05' |     '0.005679%' |
|   0.00056789  |    '0.00056789' |     '0.000568'  |  '5.678900e-04' |     '0.056789%' |
|   0.0056789   |    '0.0056789'  |     '0.005679'  |  '5.678900e-03' |     '0.567890%' |
|   0.056789    |    '0.056789'   |     '0.056789'  |  '5.678900e-02' |     '5.678900%' |
|   0.56789     |    '0.56789'    |     '0.567890'  |  '5.678900e-01' |    '56.789000%' |
|   5.6789      |    '5.6789'     |     '5.678900'  |  '5.678900e+00' |   '567.890000%' |
|  56.789       |   '56.789'      |    '56.789000'  |  '5.678900e+01' |  '5678.900000%' |
| 567.89        |  '567.89'       |   '567.890000'  |  '5.678900e+02' | '56789.000000%' |
+---------------+-----------------+-----------------+-----------------+-----------------+
</code></pre>
<pre><code class="language-text">+---------------+-----------------+-----------------+-----------------+-----------------+
|               |   {&lt;float&gt;:.2}  |  {&lt;float&gt;:.2f}  |  {&lt;float&gt;:.2e}  |  {&lt;float&gt;:.2%}  |
+---------------+-----------------+-----------------+-----------------+-----------------+
|   0.000056789 |    '5.7e-05'    |       '0.00'    |    '5.68e-05'   |       '0.01%'   |
|   0.00056789  |    '0.00057'    |       '0.00'    |    '5.68e-04'   |       '0.06%'   |
|   0.0056789   |    '0.0057'     |       '0.01'    |    '5.68e-03'   |       '0.57%'   |
|   0.056789    |    '0.057'      |       '0.06'    |    '5.68e-02'   |       '5.68%'   |
|   0.56789     |    '0.57'       |       '0.57'    |    '5.68e-01'   |      '56.79%'   |
|   5.6789      |    '5.7'        |       '5.68'    |    '5.68e+00'   |     '567.89%'   |
|  56.789       |    '5.7e+01'    |      '56.79'    |    '5.68e+01'   |    '5678.90%'   |
| 567.89        |    '5.7e+02'    |     '567.89'    |    '5.68e+02'   |   '56789.00%'   |
+---------------+-----------------+-----------------+-----------------+-----------------+
</code></pre>
<h3 id="ints">Ints</h3>
<pre><code class="language-python">{90:c}                                   # 'Z'
{90:b}                                   # '1011010'
{90:X}                                   # '5A'
</code></pre>
<h2 id="numbers-2">Numbers</h2>
<h3 id="types">Types</h3>
<pre><code class="language-python">&lt;int&gt;      = int(&lt;float/str/bool&gt;)       # Or: math.floor(&lt;float&gt;)
&lt;float&gt;    = float(&lt;int/str/bool&gt;)       # Or: &lt;real&gt;e±&lt;int&gt;
&lt;complex&gt;  = complex(real=0, imag=0)     # Or: &lt;real&gt; ± &lt;real&gt;j
&lt;Fraction&gt; = fractions.Fraction(0, 1)    # Or: Fraction(numerator=0, denominator=1)
&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)  # Or: Decimal((sign, digits, exponent))
</code></pre>
<ul>
<li><strong><code>'int(&lt;str&gt;)'</code> and <code>'float(&lt;str&gt;)'</code> raise ValueError on malformed strings.</strong></li>
<li><strong>Decimal numbers can be represented exactly, unlike floats where <code>'1.1 + 2.2 != 3.3'</code>.</strong></li>
<li><strong>Precision of decimal operations is set with: <code>'decimal.getcontext().prec = &lt;int&gt;'</code>.</strong></li>
</ul>
<h3 id="basic-functions">Basic Functions</h3>
<pre><code class="language-python">&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                # Or: &lt;num&gt; ** &lt;num&gt;
&lt;num&gt; = abs(&lt;num&gt;)                       # &lt;float&gt; = abs(&lt;complex&gt;)
&lt;num&gt; = round(&lt;num&gt; [, ±ndigits])        # `round(126, -1) == 130`
</code></pre>
<h3 id="math">Math</h3>
<pre><code class="language-python">from math import e, pi, inf, nan, isinf, isnan
from math import cos, acos, sin, asin, tan, atan, degrees, radians
from math import log, log10, log2
</code></pre>
<h3 id="statistics">Statistics</h3>
<pre><code class="language-python">from statistics import mean, median, variance, stdev, pvariance, pstdev
</code></pre>
<h3 id="random">Random</h3>
<pre><code class="language-python">from random import random, randint, choice, shuffle
&lt;float&gt; = random()
&lt;int&gt;   = randint(from_inclusive, to_inclusive)
&lt;el&gt;    = choice(&lt;list&gt;)
shuffle(&lt;list&gt;)
</code></pre>
<h3 id="bin-hex">Bin, Hex</h3>
<pre><code class="language-python">&lt;int&gt;        = 0b&lt;bin&gt;                   # Or: 0x&lt;hex&gt;
&lt;int&gt;        = int('±&lt;bin&gt;', 2)          # Or: int('±&lt;hex&gt;', 16)
&lt;int&gt;        = int('±0b&lt;bin&gt;', 0)        # Or: int('±0x&lt;hex&gt;', 0)
'[-]0b&lt;bin&gt;' = bin(&lt;int&gt;)                # Or: hex(&lt;int&gt;)
</code></pre>
<h3 id="bitwise-operators">Bitwise Operators</h3>
<pre><code class="language-python">&lt;int&gt;        = &lt;int&gt; &amp; &lt;int&gt;             # And
&lt;int&gt;        = &lt;int&gt; | &lt;int&gt;             # Or
&lt;int&gt;        = &lt;int&gt; ^ &lt;int&gt;             # Xor (0 if both bits equal)
&lt;int&gt;        = &lt;int&gt; &lt;&lt; n_bits           # Shift left (&gt;&gt; for right)
&lt;int&gt;        = ~&lt;int&gt;                    # Not (also: -&lt;int&gt; - 1)
</code></pre>
<h2 id="combinatorics">Combinatorics</h2>
<ul>
<li><strong>Every function returns an iterator.</strong></li>
<li><strong>If you want to print the iterator, you need to pass it to the list() function first!</strong></li>
</ul>
<pre><code class="language-python">from itertools import product, combinations, combinations_with_replacement, permutations
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; product([0, 1], repeat=3)
[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),
 (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; product('ab', '12')
[('a', '1'), ('a', '2'),
 ('b', '1'), ('b', '2')]
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; combinations('abc', 2)
[('a', 'b'), ('a', 'c'),
 ('b', 'c')]
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; combinations_with_replacement('abc', 2)
[('a', 'a'), ('a', 'b'), ('a', 'c'),
 ('b', 'b'), ('b', 'c'),
 ('c', 'c')]
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; permutations('abc', 2)
[('a', 'b'), ('a', 'c'),
 ('b', 'a'), ('b', 'c'),
 ('c', 'a'), ('c', 'b')]
</code></pre>
<h2 id="datetime">Datetime</h2>
<ul>
<li><strong>Module 'datetime' provides 'date' <code>&lt;D&gt;</code>, 'time' <code>&lt;T&gt;</code>, 'datetime' <code>&lt;DT&gt;</code> and 'timedelta' <code>&lt;TD&gt;</code> classes. All are immutable and hashable.</strong></li>
<li><strong>Time and datetime objects can be 'aware' <code>&lt;a&gt;</code>, meaning they have defined timezone, or 'naive' <code>&lt;n&gt;</code>, meaning they don't.</strong></li>
<li><strong>If object is naive, it is presumed to be in the system's timezone.</strong></li>
</ul>
<pre><code class="language-python">from datetime import date, time, datetime, timedelta
from dateutil.tz import UTC, tzlocal, gettz, resolve_imaginary
</code></pre>
<h3 id="constructors">Constructors</h3>
<pre><code class="language-python">&lt;D&gt;  = date(year, month, day)
&lt;T&gt;  = time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, fold=0)
&lt;DT&gt; = datetime(year, month, day, hour=0, minute=0, second=0, ...)
&lt;TD&gt; = timedelta(days=0, seconds=0, microseconds=0, milliseconds=0,
                 minutes=0, hours=0, weeks=0)
</code></pre>
<ul>
<li><strong>Use <code>'&lt;D/DT&gt;.weekday()'</code> to get the day of the week (Mon == 0).</strong></li>
<li><strong><code>'fold=1'</code> means the second pass in case of time jumping back for one hour.</strong></li>
<li><strong><code>'&lt;DTa&gt; = resolve_imaginary(&lt;DTa&gt;)'</code> fixes DTs that fall into the missing hour.</strong></li>
</ul>
<h3 id="now">Now</h3>
<pre><code class="language-python">&lt;D/DTn&gt;  = D/DT.today()                     # Current local date or naive datetime.
&lt;DTn&gt;    = DT.utcnow()                      # Naive datetime from current UTC time.
&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 # Aware datetime from current tz time.
</code></pre>
<ul>
<li><strong>To extract time use <code>'&lt;DTn&gt;.time()'</code>, <code>'&lt;DTa&gt;.time()'</code> or <code>'&lt;DTa&gt;.timetz()'</code>.</strong></li>
</ul>
<h3 id="timezone">Timezone</h3>
<pre><code class="language-python">&lt;tzinfo&gt; = UTC                              # UTC timezone. London without DST.
&lt;tzinfo&gt; = tzlocal()                        # Local timezone. Also gettz().
&lt;tzinfo&gt; = gettz('&lt;Continent&gt;/&lt;City&gt;')      # 'Continent/City_Name' timezone or None.
&lt;DTa&gt;    = &lt;DT&gt;.astimezone(&lt;tzinfo&gt;)        # Datetime, converted to passed timezone.
&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  # Unconverted object with new timezone.
</code></pre>
<h3 id="encode">Encode</h3>
<pre><code class="language-python">&lt;D/T/DT&gt; = D/T/DT.fromisoformat('&lt;iso&gt;')    # Object from ISO string. Raises ValueError.
&lt;DT&gt;     = DT.strptime(&lt;str&gt;, '&lt;format&gt;')   # Datetime from str, according to format.
&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          # D/DTn from days since Christ, at midnight.
&lt;DTn&gt;    = DT.fromtimestamp(&lt;real&gt;)         # Local time DTn from seconds since Epoch.
&lt;DTa&gt;    = DT.fromtimestamp(&lt;real&gt;, &lt;tz.&gt;)  # Aware datetime from seconds since Epoch.
</code></pre>
<ul>
<li><strong>ISO strings come in following forms: <code>'YYYY-MM-DD'</code>, <code>'HH:MM:SS.ffffff[±&lt;offset&gt;]'</code>, or both separated by an arbitrary character. Offset is formatted as: <code>'HH:MM'</code>.</strong></li>
<li><strong>Epoch on Unix systems is: <code>'1970-01-01 00:00 UTC'</code>, <code>'1970-01-01 01:00 CET'</code>, ...</strong></li>
</ul>
<h3 id="decode">Decode</h3>
<pre><code class="language-python">&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep='T')      # Also timespec='auto/hours/minutes/seconds'.
&lt;str&gt;    = &lt;D/T/DT&gt;.strftime('&lt;format&gt;')    # Custom string representation.
&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               # Days since Christ, ignoring time and tz.
&lt;float&gt;  = &lt;DTn&gt;.timestamp()                # Seconds since Epoch, from DTn in local tz.
&lt;float&gt;  = &lt;DTa&gt;.timestamp()                # Seconds since Epoch, from DTa.
</code></pre>
<h3 id="format-2">Format</h3>
<pre><code class="language-python">&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; dt = datetime.strptime('2015-05-14 23:39:00.00 +0200', '%Y-%m-%d %H:%M:%S.%f %z')
&gt;&gt;&gt; dt.strftime(&quot;%A, %dth of %B '%y, %I:%M%p %Z&quot;)
&quot;Thursday, 14th of May '15, 11:39PM UTC+02:00&quot;
</code></pre>
<ul>
<li><strong>When parsing, <code>'%z'</code> also accepts <code>'±HH:MM'</code>.</strong></li>
<li><strong>For abbreviated weekday and month use <code>'%a'</code> and <code>'%b'</code>.</strong></li>
</ul>
<h3 id="arithmetics">Arithmetics</h3>
<pre><code class="language-python">&lt;D/DT&gt;   = &lt;D/DT&gt;   ± &lt;TD&gt;                  # Returned datetime can fall into missing hour.
&lt;TD&gt;     = &lt;D/DTn&gt;  - &lt;D/DTn&gt;               # Returns the difference, ignoring time jumps.
&lt;TD&gt;     = &lt;DTa&gt;    - &lt;DTa&gt;                 # Ignores time jumps if they share tzinfo object.
&lt;TD&gt;     = &lt;DT_UTC&gt; - &lt;DT_UTC&gt;              # Convert DTs to UTC to get the actual delta.
</code></pre>
<h2 id="arguments">Arguments</h2>
<h3 id="inside-function-call">Inside Function Call</h3>
<pre><code class="language-python">&lt;function&gt;(&lt;positional_args&gt;)                  # f(0, 0)
&lt;function&gt;(&lt;keyword_args&gt;)                     # f(x=0, y=0)
&lt;function&gt;(&lt;positional_args&gt;, &lt;keyword_args&gt;)  # f(0, y=0)
</code></pre>
<h3 id="inside-function-definition">Inside Function Definition</h3>
<pre><code class="language-python">def f(&lt;nondefault_args&gt;):                      # def f(x, y):
def f(&lt;default_args&gt;):                         # def f(x=0, y=0):
def f(&lt;nondefault_args&gt;, &lt;default_args&gt;):      # def f(x, y=0):
</code></pre>
<h2 id="splat-operator">Splat Operator</h2>
<h3 id="inside-function-call-2">Inside Function Call</h3>
<p><strong>Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.</strong></p>
<pre><code class="language-python">args   = (1, 2)
kwargs = {'x': 3, 'y': 4, 'z': 5}
func(*args, **kwargs)
</code></pre>
<h4 id="is-the-same-as">Is the same as:</h4>
<pre><code class="language-python">func(1, 2, x=3, y=4, z=5)
</code></pre>
<h3 id="inside-function-definition-2">Inside Function Definition</h3>
<p><strong>Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.</strong></p>
<pre><code class="language-python">def add(*a):
    return sum(a)
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; add(1, 2, 3)
6
</code></pre>
<h4 id="legal-argument-combinations">Legal argument combinations:</h4>
<pre><code class="language-python">def f(x, y, z):                # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)
def f(*, x, y, z):             # f(x=1, y=2, z=3)
def f(x, *, y, z):             # f(x=1, y=2, z=3) | f(1, y=2, z=3)
def f(x, y, *, z):             # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)
</code></pre>
<pre><code class="language-python">def f(*args):                  # f(1, 2, 3)
def f(x, *args):               # f(1, 2, 3)
def f(*args, z):               # f(1, 2, z=3)
def f(x, *args, z):            # f(1, 2, z=3)
</code></pre>
<pre><code class="language-python">def f(**kwargs):               # f(x=1, y=2, z=3)
def f(x, **kwargs):            # f(x=1, y=2, z=3) | f(1, y=2, z=3)
def f(*, x, **kwargs):         # f(x=1, y=2, z=3)
</code></pre>
<pre><code class="language-python">def f(*args, **kwargs):        # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)
def f(x, *args, **kwargs):     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)
def f(*args, y, **kwargs):     # f(x=1, y=2, z=3) | f(1, y=2, z=3)
def f(x, *args, z, **kwargs):  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)
</code></pre>
<h3 id="other-uses">Other Uses</h3>
<pre><code class="language-python">&lt;list&gt;  = [*&lt;collection&gt; [, ...]]
&lt;set&gt;   = {*&lt;collection&gt; [, ...]}
&lt;tuple&gt; = (*&lt;collection&gt;, [...])
&lt;dict&gt;  = {**&lt;dict&gt; [, ...]}
</code></pre>
<pre><code class="language-python">head, *body, tail = &lt;collection&gt;
</code></pre>
<h2 id="inline">Inline</h2>
<h3 id="lambda">Lambda</h3>
<pre><code class="language-python">&lt;function&gt; = lambda: &lt;return_value&gt;
&lt;function&gt; = lambda &lt;argument_1&gt;, &lt;argument_2&gt;: &lt;return_value&gt;
</code></pre>
<h3 id="comprehension">Comprehension</h3>
<pre><code class="language-python">&lt;list&gt; = [i+1 for i in range(10)]                   # [1, 2, ..., 10]
&lt;set&gt;  = {i for i in range(10) if i &gt; 5}            # {6, 7, 8, 9}
&lt;iter&gt; = (i+5 for i in range(10))                   # (5, 6, ..., 14)
&lt;dict&gt; = {i: i*2 for i in range(10)}                # {0: 0, 1: 2, ..., 9: 18}
</code></pre>
<pre><code class="language-python">out = [i+j for i in range(10) for j in range(10)]
</code></pre>
<h4 id="is-the-same-as-2">Is the same as:</h4>
<pre><code class="language-python">out = []
for i in range(10):
    for j in range(10):
        out.append(i+j)
</code></pre>
<h3 id="map-filter-reduce">Map, Filter, Reduce</h3>
<pre><code class="language-python">from functools import reduce
&lt;iter&gt; = map(lambda x: x + 1, range(10))            # (1, 2, ..., 10)
&lt;iter&gt; = filter(lambda x: x &gt; 5, range(10))         # (6, 7, 8, 9)
&lt;obj&gt;  = reduce(lambda out, x: out + x, range(10))  # 45
</code></pre>
<h3 id="any-all">Any, All</h3>
<pre><code class="language-python">&lt;bool&gt; = any(&lt;collection&gt;)                          # False if empty.
&lt;bool&gt; = all(el[1] for el in &lt;collection&gt;)          # True if empty.
</code></pre>
<h3 id="if-else">If - Else</h3>
<pre><code class="language-python">&lt;obj&gt; = &lt;expression_if_true&gt; if &lt;condition&gt; else &lt;expression_if_false&gt;
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; [a if a else 'zero' for a in (0, 1, 2, 3)]
['zero', 1, 2, 3]
</code></pre>
<h3 id="namedtuple-enum-dataclass">Namedtuple, Enum, Dataclass</h3>
<pre><code class="language-python">from collections import namedtuple
Point     = namedtuple('Point', 'x y')
point     = Point(0, 0)
</code></pre>
<pre><code class="language-python">from enum import Enum
Direction = Enum('Direction', 'n e s w')
direction = Direction.n
</code></pre>
<pre><code class="language-python">from dataclasses import make_dataclass
Creature  = make_dataclass('Creature', ['location', 'direction'])
creature  = Creature(Point(0, 0), Direction.n)
</code></pre>
<h2 id="closure">Closure</h2>
<p><strong>We have a closure in Python when:</strong></p>
<ul>
<li><strong>A nested function references a value of its enclosing function and then</strong></li>
<li><strong>the enclosing function returns the nested function.</strong></li>
</ul>
<pre><code class="language-python">def get_multiplier(a):
    def out(b):
        return a * b
    return out
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; multiply_by_3 = get_multiplier(3)
&gt;&gt;&gt; multiply_by_3(10)
30
</code></pre>
<ul>
<li><strong>If multiple nested functions within enclosing function reference the same value, that value gets shared.</strong></li>
<li><strong>To dynamically access function's first free variable use <code>'&lt;function&gt;.__closure__[0].cell_contents'</code>.</strong></li>
</ul>
<h3 id="partial">Partial</h3>
<pre><code class="language-python">from functools import partial
&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; import operator as op
&gt;&gt;&gt; multiply_by_3 = partial(op.mul, 3)
&gt;&gt;&gt; multiply_by_3(10)
30
</code></pre>
<ul>
<li><strong>Partial is also useful in cases when function needs to be passed as an argument, because it enables us to set its arguments beforehand.</strong></li>
<li><strong>A few examples being: <code>'defaultdict(&lt;function&gt;)'</code>, <code>'iter(&lt;function&gt;, to_exclusive)'</code> and dataclass's <code>'field(default_factory=&lt;function&gt;)'</code>.</strong></li>
</ul>
<h3 id="non-local">Non-Local</h3>
<p><strong>If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.</strong></p>
<pre><code class="language-python">def get_counter():
    i = 0
    def out():
        nonlocal i
        i += 1
        return i
    return out
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; counter = get_counter()
&gt;&gt;&gt; counter(), counter(), counter()
(1, 2, 3)
</code></pre>
<h2 id="decorator">Decorator</h2>
<p><strong>A decorator takes a function, adds some functionality and returns it.</strong></p>
<pre><code class="language-python">@decorator_name
def function_that_gets_passed_to_decorator():
    ...
</code></pre>
<h3 id="debugger-example">Debugger Example</h3>
<p><strong>Decorator that prints function's name every time it gets called.</strong></p>
<pre><code class="language-python">from functools import wraps

def debug(func):
    @wraps(func)
    def out(*args, **kwargs):
        print(func.__name__)
        return func(*args, **kwargs)
    return out

@debug
def add(x, y):
    return x + y
</code></pre>
<ul>
<li><strong>Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out).</strong></li>
<li><strong>Without it <code>'add.__name__'</code> would return <code>'out'</code>.</strong></li>
</ul>
<h3 id="lru-cache">LRU Cache</h3>
<p><strong>Decorator that caches function's return values. All function's arguments must be hashable.</strong></p>
<pre><code class="language-python">from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n):
    return n if n &lt; 2 else fib(n-2) + fib(n-1)
</code></pre>
<ul>
<li><strong>CPython interpreter limits recursion depth to 1000 by default. To increase it use <code>'sys.setrecursionlimit(&lt;depth&gt;)'</code>.</strong></li>
</ul>
<h3 id="parametrized-decorator">Parametrized Decorator</h3>
<p><strong>A decorator that accepts arguments and returns a normal decorator that accepts a function.</strong></p>
<pre><code class="language-python">from functools import wraps

def debug(print_result=False):
    def decorator(func):
        @wraps(func)
        def out(*args, **kwargs):
            result = func(*args, **kwargs)
            print(func.__name__, result if print_result else '')
            return result
        return out
    return decorator

@debug(print_result=True)
def add(x, y):
    return x + y
</code></pre>
<h2 id="class">Class</h2>
<pre><code class="language-python">class &lt;name&gt;:
    def __init__(self, a):
        self.a = a
    def __repr__(self):
        class_name = self.__class__.__name__
        return f'{class_name}({self.a!r})'
    def __str__(self):
        return str(self.a)

    @classmethod
    def get_class_name(cls):
        return cls.__name__
</code></pre>
<ul>
<li><strong>Return value of repr() should be unambiguous and of str() readable.</strong></li>
<li><strong>If only repr() is defined, it will also be used for str().</strong></li>
</ul>
<h4 id="str-use-cases">Str() use cases:</h4>
<pre><code class="language-python">print(&lt;el&gt;)
print(f'{&lt;el&gt;}')
raise Exception(&lt;el&gt;)
loguru.logger.debug(&lt;el&gt;)
csv.writer(&lt;file&gt;).writerow([&lt;el&gt;])
</code></pre>
<h4 id="repr-use-cases">Repr() use cases:</h4>
<pre><code class="language-python">print([&lt;el&gt;])
print(f'{&lt;el&gt;!r}')
&gt;&gt;&gt; &lt;el&gt;
loguru.logger.exception()
Z = dataclasses.make_dataclass('Z', ['a']); print(Z(&lt;el&gt;))
</code></pre>
<h3 id="constructor-overloading">Constructor Overloading</h3>
<pre><code class="language-python">class &lt;name&gt;:
    def __init__(self, a=None):
        self.a = a
</code></pre>
<h3 id="inheritance">Inheritance</h3>
<pre><code class="language-python">class Person:
    def __init__(self, name, age):
        self.name = name
        self.age  = age

class Employee(Person):
    def __init__(self, name, age, staff_num):
        super().__init__(name, age)
        self.staff_num = staff_num
</code></pre>
<h3 id="multiple-inheritance">Multiple Inheritance</h3>
<pre><code class="language-python">class A: pass
class B: pass
class C(A, B): pass
</code></pre>
<p><strong>MRO determines the order in which parent classes are traversed when searching for a method:</strong></p>
<pre><code class="language-python">&gt;&gt;&gt; C.mro()
[&lt;class 'C'&gt;, &lt;class 'A'&gt;, &lt;class 'B'&gt;, &lt;class 'object'&gt;]
</code></pre>
<h3 id="property">Property</h3>
<p><strong>Pythonic way of implementing getters and setters.</strong></p>
<pre><code class="language-python">class MyClass:
    @property
    def a(self):
        return self._a

    @a.setter
    def a(self, value):
        self._a = value
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; el = MyClass()
&gt;&gt;&gt; el.a = 123
&gt;&gt;&gt; el.a
123
</code></pre>
<h3 id="dataclass">Dataclass</h3>
<p><strong>Decorator that automatically generates init(), repr() and eq() special methods.</strong></p>
<pre><code class="language-python">from dataclasses import dataclass, field

@dataclass(order=False, frozen=False)
class &lt;class_name&gt;:
    &lt;attr_name_1&gt;: &lt;type&gt;
    &lt;attr_name_2&gt;: &lt;type&gt; = &lt;default_value&gt;
    &lt;attr_name_3&gt;: list/dict/set = field(default_factory=list/dict/set)
</code></pre>
<ul>
<li><strong>Objects can be made sortable with <code>'order=True'</code> and/or immutable and hashable with <code>'frozen=True'</code>.</strong></li>
<li><strong>Function field() is needed because <code>'&lt;attr_name&gt;: list = []'</code> would make a list that is shared among all instances.</strong></li>
<li><strong>Default_factory can be any <a href="#callable">callable</a>.</strong></li>
</ul>
<h4 id="inline-2">Inline:</h4>
<pre><code class="language-python">from dataclasses import make_dataclass
&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_attribute_names&gt;)
&lt;class&gt; = make_dataclass('&lt;class_name&gt;', &lt;coll_of_tuples&gt;)
&lt;tuple&gt; = ('&lt;attr_name&gt;', &lt;type&gt; [, &lt;default_value&gt;])
</code></pre>
<h3 id="slots">Slots</h3>
<p><strong>Mechanism that restricts objects to attributes listed in 'slots' and significantly reduces their memory footprint.</strong></p>
<pre><code class="language-python">class MyClassWithSlots:
    __slots__ = ['a']
    def __init__(self):
        self.a = 1
</code></pre>
<h3 id="copy">Copy</h3>
<pre><code class="language-python">from copy import copy, deepcopy
&lt;object&gt; = copy(&lt;object&gt;)
&lt;object&gt; = deepcopy(&lt;object&gt;)
</code></pre>
<h2 id="duck-types">Duck Types</h2>
<p><strong>A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.</strong></p>
<h3 id="comparable">Comparable</h3>
<ul>
<li><strong>If eq() method is not overridden, it returns <code>'id(self) == id(other)'</code>, which is the same as <code>'self is other'</code>.</strong></li>
<li><strong>That means all objects compare not equal by default.</strong></li>
<li><strong>Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted.</strong></li>
</ul>
<pre><code class="language-python">class MyComparable:
    def __init__(self, a):
        self.a = a
    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.a == other.a
        return NotImplemented
</code></pre>
<h3 id="hashable">Hashable</h3>
<ul>
<li><strong>Hashable object needs both hash() and eq() methods and its hash value should never change.</strong></li>
<li><strong>Hashable objects that compare equal must have the same hash value, meaning default hash() that returns <code>'id(self)'</code> will not do.</strong></li>
<li><strong>That is why Python automatically makes classes unhashable if you only implement eq().</strong></li>
</ul>
<pre><code class="language-python">class MyHashable:
    def __init__(self, a):
        self._a = a
    @property
    def a(self):
        return self._a
    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.a == other.a
        return NotImplemented
    def __hash__(self):
        return hash(self.a)
</code></pre>
<h3 id="sortable">Sortable</h3>
<ul>
<li><strong>With total_ordering decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods.</strong></li>
</ul>
<pre><code class="language-python">from functools import total_ordering

@total_ordering
class MySortable:
    def __init__(self, a):
        self.a = a
    def __eq__(self, other):
        if isinstance(other, type(self)):
            return self.a == other.a
        return NotImplemented
    def __lt__(self, other):
        if isinstance(other, type(self)):
            return self.a &lt; other.a
        return NotImplemented
</code></pre>
<h3 id="iterator-2">Iterator</h3>
<ul>
<li><strong>Any object that has methods next() and iter() is an iterator.</strong></li>
<li><strong>Next() should return next item or raise StopIteration.</strong></li>
<li><strong>Iter() should return 'self'.</strong></li>
</ul>
<pre><code class="language-python">class Counter:
    def __init__(self):
        self.i = 0
    def __next__(self):
        self.i += 1
        return self.i
    def __iter__(self):
        return self
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; counter = Counter()
&gt;&gt;&gt; next(counter), next(counter), next(counter)
(1, 2, 3)
</code></pre>
<h4 id="python-has-many-different-iterator-objects">Python has many different iterator objects:</h4>
<ul>
<li><strong>Iterators returned by the <a href="#iterator">iter()</a> function, such as list_iterator and set_iterator.</strong></li>
<li><strong>Objects returned by the <a href="#itertools">itertools</a> module, such as count, repeat and cycle.</strong></li>
<li><strong>Generators returned by the <a href="#generator">generator functions</a> and <a href="#comprehension">generator expressions</a>.</strong></li>
<li><strong>File objects returned by the <a href="#open">open()</a> function, etc.</strong></li>
</ul>
<h3 id="callable">Callable</h3>
<ul>
<li><strong>All functions and classes have a call() method, hence are callable.</strong></li>
<li><strong>When this cheatsheet uses <code>'&lt;function&gt;'</code> as an argument, it actually means <code>'&lt;callable&gt;'</code>.</strong></li>
</ul>
<pre><code class="language-python">class Counter:
    def __init__(self):
        self.i = 0
    def __call__(self):
        self.i += 1
        return self.i
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; counter = Counter()
&gt;&gt;&gt; counter(), counter(), counter()
(1, 2, 3)
</code></pre>
<h3 id="context-manager">Context Manager</h3>
<ul>
<li><strong>Enter() should lock the resources and optionally return an object.</strong></li>
<li><strong>Exit() should release the resources.</strong></li>
<li><strong>Any exception that happens inside the with block is passed to the exit() method.</strong></li>
<li><strong>If it wishes to suppress the exception it must return a true value.</strong></li>
</ul>
<pre><code class="language-python">class MyOpen:
    def __init__(self, filename):
        self.filename = filename
    def __enter__(self):
        self.file = open(self.filename)
        return self.file
    def __exit__(self, exc_type, exception, traceback):
        self.file.close()
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; with open('test.txt', 'w') as file:
...     file.write('Hello World!')
&gt;&gt;&gt; with MyOpen('test.txt') as file:
...     print(file.read())
Hello World!
</code></pre>
<h2 id="iterable-duck-types">Iterable Duck Types</h2>
<h3 id="iterable">Iterable</h3>
<ul>
<li><strong>Only required method is iter(). It should return an iterator of object's items.</strong></li>
<li><strong>Contains() automatically works on any object that has iter() defined.</strong></li>
</ul>
<pre><code class="language-python">class MyIterable:
    def __init__(self, a):
        self.a = a
    def __iter__(self):
        return iter(self.a)
    def __contains__(self, el):
        return el in self.a
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; obj = MyIterable([1, 2, 3])
&gt;&gt;&gt; [el for el in obj]
[1, 2, 3]
&gt;&gt;&gt; 1 in obj
True
</code></pre>
<h3 id="collection">Collection</h3>
<ul>
<li><strong>Only required methods are iter() and len().</strong></li>
<li><strong>This cheatsheet actually means <code>'&lt;iterable&gt;'</code> when it uses <code>'&lt;collection&gt;'</code>.</strong></li>
<li><strong>I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'.</strong></li>
</ul>
<pre><code class="language-python">class MyCollection:
    def __init__(self, a):
        self.a = a
    def __iter__(self):
        return iter(self.a)
    def __contains__(self, el):
        return el in self.a
    def __len__(self):
        return len(self.a)
</code></pre>
<h3 id="sequence">Sequence</h3>
<ul>
<li><strong>Only required methods are len() and getitem().</strong></li>
<li><strong>Getitem() should return an item at index or raise IndexError.</strong></li>
<li><strong>Iter() and contains() automatically work on any object that has getitem() defined.</strong></li>
<li><strong>Reversed() automatically works on any object that has getitem() and len() defined.</strong></li>
</ul>
<pre><code class="language-python">class MySequence:
    def __init__(self, a):
        self.a = a
    def __iter__(self):
        return iter(self.a)
    def __contains__(self, el):
        return el in self.a
    def __len__(self):
        return len(self.a)
    def __getitem__(self, i):
        return self.a[i]
    def __reversed__(self):
        return reversed(self.a)
</code></pre>
<h3 id="abc-sequence">ABC Sequence</h3>
<ul>
<li><strong>It's a richer interface than the basic sequence.</strong></li>
<li><strong>Extending it generates iter(), contains(), reversed(), index() and count().</strong></li>
<li><strong>Unlike <code>'abc.Iterable'</code> and <code>'abc.Collection'</code>, it is not a duck type. That is why <code>'issubclass(MySequence, abc.Sequence)'</code> would return False even if MySequence had all the methods defined.</strong></li>
</ul>
<pre><code class="language-python">from collections import abc

class MyAbcSequence(abc.Sequence):
    def __init__(self, a):
        self.a = a
    def __len__(self):
        return len(self.a)
    def __getitem__(self, i):
        return self.a[i]
</code></pre>
<h4 id="table-of-required-and-automatically-available-special-methods">Table of required and automatically available special methods:</h4>
<pre><code class="language-text">+------------+------------+------------+------------+--------------+
|            |  Iterable  | Collection |  Sequence  | abc.Sequence |
+------------+------------+------------+------------+--------------+
| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |
| contains() |    Yes     |    Yes     |    Yes     |     Yes      |
| len()      |            |    REQ     |    REQ     |     REQ      |
| getitem()  |            |            |    REQ     |     REQ      |
| reversed() |            |            |    Yes     |     Yes      |
| index()    |            |            |            |     Yes      |
| count()    |            |            |            |     Yes      |
+------------+------------+------------+------------+--------------+
</code></pre>
<ul>
<li><strong>Other ABCs that generate missing methods are: MutableSequence, Set, MutableSet, Mapping and MutableMapping.</strong></li>
<li><strong>Names of their required methods are stored in <code>'&lt;abc&gt;.__abstractmethods__'</code>.</strong></li>
</ul>
<h2 id="enum">Enum</h2>
<pre><code class="language-python">from enum import Enum, auto

class &lt;enum_name&gt;(Enum):
    &lt;member_name_1&gt; = &lt;value_1&gt;
    &lt;member_name_2&gt; = &lt;value_2_a&gt;, &lt;value_2_b&gt;
    &lt;member_name_3&gt; = auto()
</code></pre>
<ul>
<li><strong>If there are no numeric values before auto(), it returns 1.</strong></li>
<li><strong>Otherwise it returns an increment of the last numeric value.</strong></li>
</ul>
<pre><code class="language-python">&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;                 # Returns a member.
&lt;member&gt; = &lt;enum&gt;['&lt;member_name&gt;']              # Returns a member or raises KeyError.
&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                      # Returns a member or raises ValueError.
&lt;str&gt;    = &lt;member&gt;.name                        # Returns member's name.
&lt;obj&gt;    = &lt;member&gt;.value                       # Returns member's value.
</code></pre>
<pre><code class="language-python">list_of_members = list(&lt;enum&gt;)
member_names    = [a.name for a in &lt;enum&gt;]
member_values   = [a.value for a in &lt;enum&gt;]
random_member   = random.choice(list(&lt;enum&gt;))
</code></pre>
<pre><code class="language-python">def get_next_member(member):
    members = list(member.__class__)
    index   = (members.index(member) + 1) % len(members)
    return members[index]
</code></pre>
<h3 id="inline-3">Inline</h3>
<pre><code class="language-python">Cutlery = Enum('Cutlery', 'fork knife spoon')
Cutlery = Enum('Cutlery', ['fork', 'knife', 'spoon'])
Cutlery = Enum('Cutlery', {'fork': 1, 'knife': 2, 'spoon': 3})
</code></pre>
<h4 id="user-defined-functions-cannot-be-values-so-they-must-be-wrapped">User-defined functions cannot be values, so they must be wrapped:</h4>
<pre><code class="language-python">from functools import partial
LogicOp = Enum('LogicOp', {'AND': partial(lambda l, r: l and r),
                           'OR' : partial(lambda l, r: l or r)})
</code></pre>
<ul>
<li><strong>Another solution in this particular case is to use built-in functions and_() and or_() from the module <a href="#operator">operator</a>.</strong></li>
</ul>
<h2 id="exceptions">Exceptions</h2>
<h3 id="basic-example">Basic Example</h3>
<pre><code class="language-python">try:
    &lt;code&gt;
except &lt;exception&gt;:
    &lt;code&gt;
</code></pre>
<h3 id="complex-example">Complex Example</h3>
<pre><code class="language-python">try:
    &lt;code_1&gt;
except &lt;exception_a&gt;:
    &lt;code_2_a&gt;
except &lt;exception_b&gt;:
    &lt;code_2_b&gt;
else:
    &lt;code_2_c&gt;
finally:
    &lt;code_3&gt;
</code></pre>
<h3 id="catching-exceptions">Catching Exceptions</h3>
<pre><code class="language-python">except &lt;exception&gt;:
except &lt;exception&gt; as &lt;name&gt;:
except (&lt;exception&gt;, ...):
except (&lt;exception&gt;, ...) as &lt;name&gt;:
</code></pre>
<ul>
<li><strong>Also catches subclasses of the exception.</strong></li>
<li><strong>Use <code>'traceback.print_exc()'</code> to print the error message to stderr.</strong></li>
</ul>
<h3 id="raising-exceptions">Raising Exceptions</h3>
<pre><code class="language-python">raise &lt;exception&gt;
raise &lt;exception&gt;()
raise &lt;exception&gt;(&lt;el&gt; [, ...])
</code></pre>
<h4 id="re-raising-caught-exception">Re-raising caught exception:</h4>
<pre><code class="language-python">except &lt;exception&gt; as &lt;name&gt;:
    ...
    raise
</code></pre>
<h3 id="exception-object">Exception Object</h3>
<pre><code class="language-python">arguments = &lt;name&gt;.args
exc_type  = &lt;name&gt;.__class__
filename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename
func_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name
line      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)
error_msg = traceback.format_exception(exc_type, &lt;name&gt;, &lt;name&gt;.__traceback__)
</code></pre>
<h3 id="built-in-exceptions">Built-in Exceptions</h3>
<pre><code class="language-text">BaseException
 +-- SystemExit                   # Raised by the sys.exit() function.
 +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).
 +-- Exception                    # User-defined exceptions should be derived from this class.
      +-- ArithmeticError         # Base class for arithmetic errors.
      |    +-- ZeroDivisionError  # Raised when dividing by zero.
      +-- AttributeError          # Raised when an attribute is missing.
      +-- EOFError                # Raised by input() when it hits end-of-file condition.
      +-- LookupError             # Raised when a look-up on a collection fails.
      |    +-- IndexError         # Raised when a sequence index is out of range.
      |    +-- KeyError           # Raised when a dictionary key or set element is not found.
      +-- NameError               # Raised when a variable name is not found.
      +-- OSError                 # Failures such as “file not found” or “disk full”.
      |    +-- FileNotFoundError  # When a file or directory is requested but doesn't exist.
      +-- RuntimeError            # Raised by errors that don't fall into other categories.
      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.
      +-- StopIteration           # Raised by next() when run on an empty iterator.
      +-- TypeError               # Raised when an argument is of wrong type.
      +-- ValueError              # When an argument is of right type but inappropriate value.
           +-- UnicodeError       # Raised when encoding/decoding strings to/from bytes fails.
</code></pre>
<h4 id="collections-and-their-exceptions">Collections and their exceptions:</h4>
<pre><code class="language-text">+-----------+------------+------------+------------+
|           |    list    |    dict    |    set     |
+-----------+------------+------------+------------+
| getitem() | IndexError |  KeyError  |            |
| pop()     | IndexError |  KeyError  |  KeyError  |
| remove()  | ValueError |            |  KeyError  |
| index()   | ValueError |            |            |
+-----------+------------+------------+------------+
</code></pre>
<h4 id="useful-built-in-exceptions">Useful built-in exceptions:</h4>
<pre><code class="language-python">raise TypeError('Argument is of wrong type!')
raise ValueError('Argument is of right type but inappropriate value!')
raise RuntimeError('None of above!')
</code></pre>
<h3 id="user-defined-exceptions">User-defined Exceptions</h3>
<pre><code class="language-python">class MyError(Exception):
    pass

class MyInputError(MyError):
    pass
</code></pre>
<h2 id="exit">Exit</h2>
<p><strong>Exits the interpreter by raising SystemExit exception.</strong></p>
<pre><code class="language-python">import sys
sys.exit()                        # Exits with exit code 0 (success).
sys.exit(&lt;el&gt;)                    # Prints to stderr and exits with 1.
sys.exit(&lt;int&gt;)                   # Exits with passed exit code.
</code></pre>
<h2 id="print">Print</h2>
<pre><code class="language-python">print(&lt;el_1&gt;, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
</code></pre>
<ul>
<li><strong>Use <code>'file=sys.stderr'</code> for messages about errors.</strong></li>
<li><strong>Use <code>'flush=True'</code> to forcibly flush the stream.</strong></li>
</ul>
<h3 id="pretty-print">Pretty Print</h3>
<pre><code class="language-python">from pprint import pprint
pprint(&lt;collection&gt;, width=80, depth=None, compact=False, sort_dicts=True)
</code></pre>
<ul>
<li><strong>Levels deeper than 'depth' get replaced by '...'.</strong></li>
</ul>
<h2 id="input">Input</h2>
<p><strong>Reads a line from user input or pipe if present.</strong></p>
<pre><code class="language-python">&lt;str&gt; = input(prompt=None)
</code></pre>
<ul>
<li><strong>Trailing newline gets stripped.</strong></li>
<li><strong>Prompt string is printed to the standard output before reading input.</strong></li>
<li><strong>Raises EOFError when user hits EOF (ctrl-d/z) or input stream gets exhausted.</strong></li>
</ul>
<h2 id="command-line-arguments">Command Line Arguments</h2>
<pre><code class="language-python">import sys
script_name = sys.argv[0]
arguments   = sys.argv[1:]
</code></pre>
<h3 id="argument-parser">Argument Parser</h3>
<pre><code class="language-python">from argparse import ArgumentParser, FileType
p = ArgumentParser(description=&lt;str&gt;)
p.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', action='store_true')  # Flag
p.add_argument('-&lt;short_name&gt;', '--&lt;name&gt;', type=&lt;type&gt;)          # Option
p.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs=1)                    # First argument
p.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='+')                  # Remaining arguments
p.add_argument('&lt;name&gt;', type=&lt;type&gt;, nargs='*')                  # Optional arguments
args  = p.parse_args()                                            # Exits on error.
value = args.&lt;name&gt;
</code></pre>
<ul>
<li><strong>Use <code>'help=&lt;str&gt;'</code> to set argument description.</strong></li>
<li><strong>Use <code>'default=&lt;el&gt;'</code> to set the default value.</strong></li>
<li><strong>Use <code>'type=FileType(&lt;mode&gt;)'</code> for files.</strong></li>
</ul>
<h2 id="open">Open</h2>
<p><strong>Opens the file and returns a corresponding file object.</strong></p>
<pre><code class="language-python">&lt;file&gt; = open('&lt;path&gt;', mode='r', encoding=None, newline=None)
</code></pre>
<ul>
<li><strong><code>'encoding=None'</code> means that the default encoding is used, which is platform dependent. Best practice is to use <code>'encoding=&quot;utf-8&quot;'</code> whenever possible.</strong></li>
<li><strong><code>'newline=None'</code> means all different end of line combinations are converted to '\n' on read, while on write all '\n' characters are converted to system's default line separator.</strong></li>
<li><strong><code>'newline=&quot;&quot;'</code> means no conversions take place, but input is still broken into chunks by readline() and readlines() on either '\n', '\r' or '\r\n'.</strong></li>
</ul>
<h3 id="modes">Modes</h3>
<ul>
<li><strong><code>'r'</code>  - Read (default).</strong></li>
<li><strong><code>'w'</code>  - Write (truncate).</strong></li>
<li><strong><code>'x'</code>  - Write or fail if the file already exists.</strong></li>
<li><strong><code>'a'</code>  - Append.</strong></li>
<li><strong><code>'w+'</code> - Read and write (truncate).</strong></li>
<li><strong><code>'r+'</code> - Read and write from the start.</strong></li>
<li><strong><code>'a+'</code> - Read and write from the end.</strong></li>
<li><strong><code>'t'</code>  - Text mode (default).</strong></li>
<li><strong><code>'b'</code>  - Binary mode.</strong></li>
</ul>
<h3 id="exceptions-2">Exceptions</h3>
<ul>
<li><strong><code>'FileNotFoundError'</code> can be raised when reading with <code>'r'</code> or <code>'r+'</code>.</strong></li>
<li><strong><code>'FileExistsError'</code> can be raised when writing with <code>'x'</code>.</strong></li>
<li><strong><code>'IsADirectoryError'</code> and <code>'PermissionError'</code> can be raised by any.</strong></li>
<li><strong><code>'OSError'</code> is the parent class of all listed exceptions.</strong></li>
</ul>
<h3 id="file-object">File Object</h3>
<pre><code class="language-python">&lt;file&gt;.seek(0)                      # Moves to the start of the file.
&lt;file&gt;.seek(offset)                 # Moves 'offset' chars/bytes from the start.
&lt;file&gt;.seek(0, 2)                   # Moves to the end of the file.
&lt;bin_file&gt;.seek(±offset, &lt;anchor&gt;)  # Anchor: 0 start, 1 current position, 2 end.
</code></pre>
<pre><code class="language-python">&lt;str/bytes&gt; = &lt;file&gt;.read(size=-1)  # Reads 'size' chars/bytes or until EOF.
&lt;str/bytes&gt; = &lt;file&gt;.readline()     # Returns a line or empty string/bytes on EOF.
&lt;list&gt;      = &lt;file&gt;.readlines()    # Returns a list of remaining lines.
&lt;str/bytes&gt; = next(&lt;file&gt;)          # Returns a line using buffer. Do not mix.
</code></pre>
<pre><code class="language-python">&lt;file&gt;.write(&lt;str/bytes&gt;)           # Writes a string or bytes object.
&lt;file&gt;.writelines(&lt;collection&gt;)     # Writes a coll. of strings or bytes objects.
&lt;file&gt;.flush()                      # Flushes write buffer.
</code></pre>
<ul>
<li><strong>Methods do not add or strip trailing newlines, even writelines().</strong></li>
</ul>
<h3 id="read-text-from-file">Read Text from File</h3>
<pre><code class="language-python">def read_file(filename):
    with open(filename, encoding='utf-8') as file:
        return file.readlines()
</code></pre>
<h3 id="write-text-to-file">Write Text to File</h3>
<pre><code class="language-python">def write_to_file(filename, text):
    with open(filename, 'w', encoding='utf-8') as file:
        file.write(text)
</code></pre>
<h2 id="path">Path</h2>
<pre><code class="language-python">from os import getcwd, path, listdir
from glob import glob
</code></pre>
<pre><code class="language-python">&lt;str&gt;  = getcwd()                   # Returns the current working directory.
&lt;str&gt;  = path.join(&lt;path&gt;, ...)     # Joins two or more pathname components.
&lt;str&gt;  = path.abspath(&lt;path&gt;)       # Returns absolute path.
</code></pre>
<pre><code class="language-python">&lt;str&gt;  = path.basename(&lt;path&gt;)      # Returns final component of the path.
&lt;str&gt;  = path.dirname(&lt;path&gt;)       # Returns path without the final component.
&lt;tup.&gt; = path.splitext(&lt;path&gt;)      # Splits on last period of the final component.
</code></pre>
<pre><code class="language-python">&lt;list&gt; = listdir(path='.')          # Returns filenames located at path.
&lt;list&gt; = glob('&lt;pattern&gt;')          # Returns paths matching the wildcard pattern.
</code></pre>
<pre><code class="language-python">&lt;bool&gt; = path.exists(&lt;path&gt;)        # Or: &lt;Path&gt;.exists()
&lt;bool&gt; = path.isfile(&lt;path&gt;)        # Or: &lt;DirEntry/Path&gt;.is_file()
&lt;bool&gt; = path.isdir(&lt;path&gt;)         # Or: &lt;DirEntry/Path&gt;.is_dir()
</code></pre>
<h3 id="direntry">DirEntry</h3>
<p><strong>Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type information.</strong></p>
<pre><code class="language-python">from os import scandir
</code></pre>
<pre><code class="language-python">&lt;iter&gt; = scandir(path='.')          # Returns DirEntry objects located at path.
&lt;str&gt;  = &lt;DirEntry&gt;.path            # Returns path as a string.
&lt;str&gt;  = &lt;DirEntry&gt;.name            # Returns final component as a string.
&lt;file&gt; = open(&lt;DirEntry&gt;)           # Opens the file and returns file object.
</code></pre>
<h3 id="path-object">Path Object</h3>
<pre><code class="language-python">from pathlib import Path
</code></pre>
<pre><code class="language-python">&lt;Path&gt; = Path(&lt;path&gt; [, ...])       # Accepts strings, Paths and DirEntry objects.
&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    # One of the paths must be a Path object.
</code></pre>
<pre><code class="language-python">&lt;Path&gt; = Path()                     # Returns relative cwd. Also Path('.').
&lt;Path&gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().
&lt;Path&gt; = &lt;Path&gt;.resolve()           # Returns absolute Path without symlinks.
</code></pre>
<pre><code class="language-python">&lt;Path&gt; = &lt;Path&gt;.parent              # Returns Path without final component.
&lt;str&gt;  = &lt;Path&gt;.name                # Returns final component as a string.
&lt;str&gt;  = &lt;Path&gt;.stem                # Returns final component without extension.
&lt;str&gt;  = &lt;Path&gt;.suffix              # Returns final component's extension.
&lt;tup.&gt; = &lt;Path&gt;.parts               # Returns all components as strings.
</code></pre>
<pre><code class="language-python">&lt;iter&gt; = &lt;Path&gt;.iterdir()           # Returns dir contents as Path objects.
&lt;iter&gt; = &lt;Path&gt;.glob('&lt;pattern&gt;')   # Returns Paths matching the wildcard pattern.
</code></pre>
<pre><code class="language-python">&lt;str&gt;  = str(&lt;Path&gt;)                # Returns path as a string.
&lt;file&gt; = open(&lt;Path&gt;)               # Opens the file and returns file object.
</code></pre>
<h2 id="os-commands">OS Commands</h2>
<h3 id="files-and-directories">Files and Directories</h3>
<ul>
<li><strong>Paths can be either strings, Paths or DirEntry objects.</strong></li>
<li><strong>Functions report OS related errors by raising either OSError or one of its <a href="#exceptions-1">subclasses</a>.</strong></li>
</ul>
<pre><code class="language-python">import os, shutil
</code></pre>
<pre><code class="language-python">os.chdir(&lt;path&gt;)                    # Changes the current working directory.
os.mkdir(&lt;path&gt;, mode=0o777)        # Creates a directory. Mode is in octal.
</code></pre>
<pre><code class="language-python">shutil.copy(from, to)               # Copies the file. 'to' can exist or be a dir.
shutil.copytree(from, to)           # Copies the directory. 'to' must not exist.
</code></pre>
<pre><code class="language-python">os.rename(from, to)                 # Renames/moves the file or directory.
os.replace(from, to)                # Same, but overwrites 'to' if it exists.
</code></pre>
<pre><code class="language-python">os.remove(&lt;path&gt;)                   # Deletes the file.
os.rmdir(&lt;path&gt;)                    # Deletes the empty directory.
shutil.rmtree(&lt;path&gt;)               # Deletes the directory.
</code></pre>
<h3 id="shell-commands">Shell Commands</h3>
<pre><code class="language-python">import os
&lt;str&gt; = os.popen('&lt;shell_command&gt;').read()
</code></pre>
<h4 id="sends-1-1-to-the-basic-calculator-and-captures-its-output">Sends '1 + 1' to the basic calculator and captures its output:</h4>
<pre><code class="language-python">&gt;&gt;&gt; from subprocess import run
&gt;&gt;&gt; run('bc', input='1 + 1\n', capture_output=True, encoding='utf-8')
CompletedProcess(args='bc', returncode=0, stdout='2\n', stderr='')
</code></pre>
<h4 id="sends-testin-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-testout">Sends test.in to the basic calculator running in standard mode and saves its output to test.out:</h4>
<pre><code class="language-python">&gt;&gt;&gt; from shlex import split
&gt;&gt;&gt; os.popen('echo 1 + 1 &gt; test.in')
&gt;&gt;&gt; run(split('bc -s'), stdin=open('test.in'), stdout=open('test.out', 'w'))
CompletedProcess(args=['bc', '-s'], returncode=0)
&gt;&gt;&gt; open('test.out').read()
'2\n'
</code></pre>
<h2 id="json">JSON</h2>
<p><strong>Text file format for storing collections of strings and numbers.</strong></p>
<pre><code class="language-python">import json
&lt;str&gt;    = json.dumps(&lt;object&gt;, ensure_ascii=True, indent=None)
&lt;object&gt; = json.loads(&lt;str&gt;)
</code></pre>
<h3 id="read-object-from-json-file">Read Object from JSON File</h3>
<pre><code class="language-python">def read_json_file(filename):
    with open(filename, encoding='utf-8') as file:
        return json.load(file)
</code></pre>
<h3 id="write-object-to-json-file">Write Object to JSON File</h3>
<pre><code class="language-python">def write_to_json_file(filename, an_object):
    with open(filename, 'w', encoding='utf-8') as file:
        json.dump(an_object, file, ensure_ascii=False, indent=2)
</code></pre>
<h2 id="pickle">Pickle</h2>
<p><strong>Binary file format for storing objects.</strong></p>
<pre><code class="language-python">import pickle
&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)
&lt;object&gt; = pickle.loads(&lt;bytes&gt;)
</code></pre>
<h3 id="read-object-from-file">Read Object from File</h3>
<pre><code class="language-python">def read_pickle_file(filename):
    with open(filename, 'rb') as file:
        return pickle.load(file)
</code></pre>
<h3 id="write-object-to-file">Write Object to File</h3>
<pre><code class="language-python">def write_to_pickle_file(filename, an_object):
    with open(filename, 'wb') as file:
        pickle.dump(an_object, file)
</code></pre>
<h2 id="csv">CSV</h2>
<p><strong>Text file format for storing spreadsheets.</strong></p>
<pre><code class="language-python">import csv
</code></pre>
<h3 id="read">Read</h3>
<pre><code class="language-python">&lt;reader&gt; = csv.reader(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.
&lt;list&gt;   = next(&lt;reader&gt;)           # Returns next row as a list of strings.
&lt;list&gt;   = list(&lt;reader&gt;)           # Returns list of remaining rows.
</code></pre>
<ul>
<li><strong>File must be opened with <code>'newline=&quot;&quot;'</code> argument, or newlines embedded inside quoted fields will not be interpreted correctly!</strong></li>
</ul>
<h3 id="write">Write</h3>
<pre><code class="language-python">&lt;writer&gt; = csv.writer(&lt;file&gt;)       # Also: `dialect='excel', delimiter=','`.
&lt;writer&gt;.writerow(&lt;collection&gt;)     # Encodes objects using `str(&lt;el&gt;)`.
&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  # Appends multiple rows.
</code></pre>
<ul>
<li><strong>File must be opened with <code>'newline=&quot;&quot;'</code> argument, or '\r' will be added in front of every '\n' on platforms that use '\r\n' line endings!</strong></li>
</ul>
<h3 id="parameters">Parameters</h3>
<ul>
<li><strong><code>'dialect'</code> - Master parameter that sets the default values.</strong></li>
<li><strong><code>'delimiter'</code> - A one-character string used to separate fields.</strong></li>
<li><strong><code>'quotechar'</code> - Character for quoting fields that contain special characters.</strong></li>
<li><strong><code>'doublequote'</code> - Whether quotechars inside fields get doubled or escaped.</strong></li>
<li><strong><code>'skipinitialspace'</code> - Whether whitespace after delimiter gets stripped.</strong></li>
<li><strong><code>'lineterminator'</code> - Specifies how writer terminates rows.</strong></li>
<li><strong><code>'quoting'</code> - Controls the amount of quoting: 0 - as necessary, 1 - all.</strong></li>
<li><strong><code>'escapechar'</code> - Character for escaping 'quotechar' if 'doublequote' is False.</strong></li>
</ul>
<h3 id="dialects">Dialects</h3>
<pre><code class="language-text">+------------------+--------------+--------------+--------------+
|                  |     excel    |   excel-tab  |     unix     |
+------------------+--------------+--------------+--------------+
| delimiter        |       ','    |      '\t'    |       ','    |
| quotechar        |       '&quot;'    |       '&quot;'    |       '&quot;'    |
| doublequote      |      True    |      True    |      True    |
| skipinitialspace |     False    |     False    |     False    |
| lineterminator   |    '\r\n'    |    '\r\n'    |      '\n'    |
| quoting          |         0    |         0    |         1    |
| escapechar       |      None    |      None    |      None    |
+------------------+--------------+--------------+--------------+
</code></pre>
<h3 id="read-rows-from-csv-file">Read Rows from CSV File</h3>
<pre><code class="language-python">def read_csv_file(filename):
    with open(filename, encoding='utf-8', newline='') as file:
        return list(csv.reader(file))
</code></pre>
<h3 id="write-rows-to-csv-file">Write Rows to CSV File</h3>
<pre><code class="language-python">def write_to_csv_file(filename, rows):
    with open(filename, 'w', encoding='utf-8', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(rows)
</code></pre>
<h2 id="sqlite">SQLite</h2>
<p><strong>Server-less database engine that stores each database into a separate file.</strong></p>
<h3 id="connect">Connect</h3>
<p><strong>Opens a connection to the database file. Creates a new file if path doesn't exist.</strong></p>
<pre><code class="language-python">import sqlite3
&lt;con&gt; = sqlite3.connect('&lt;path&gt;')               # Also ':memory:'.
&lt;con&gt;.close()
</code></pre>
<h3 id="read-2">Read</h3>
<p><strong>Returned values can be of type str, int, float, bytes or None.</strong></p>
<pre><code class="language-python">&lt;cursor&gt; = &lt;con&gt;.execute('&lt;query&gt;')             # Can raise a subclass of sqlite3.Error.
&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  # Returns next row. Also next(&lt;cursor&gt;).
&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  # Returns remaining rows. Also list(&lt;cursor&gt;).
</code></pre>
<h3 id="write-2">Write</h3>
<pre><code class="language-python">&lt;con&gt;.execute('&lt;query&gt;')
&lt;con&gt;.commit()
</code></pre>
<h4 id="or">Or:</h4>
<pre><code class="language-python">with &lt;con&gt;:
    &lt;con&gt;.execute('&lt;query&gt;')
</code></pre>
<h3 id="placeholders">Placeholders</h3>
<ul>
<li><strong>Passed values can be of type str, int, float, bytes, None, bool, datetime.date or datetime.datetme.</strong></li>
<li><strong>Bools will be stored and returned as ints and dates as <a href="#encode">ISO formatted strings</a>.</strong></li>
</ul>
<pre><code class="language-python">&lt;con&gt;.execute('&lt;query&gt;', &lt;list/tuple&gt;)          # Replaces '?'s in query with values.
&lt;con&gt;.execute('&lt;query&gt;', &lt;dict/namedtuple&gt;)     # Replaces ':&lt;key&gt;'s with values.
&lt;con&gt;.executemany('&lt;query&gt;', &lt;coll_of_above&gt;)   # Runs execute() many times.
</code></pre>
<h3 id="example">Example</h3>
<p><strong>In this example values are not actually saved because <code>'con.commit()'</code> is omitted!</strong></p>
<pre><code class="language-python">&gt;&gt;&gt; con = sqlite3.connect('test.db')
&gt;&gt;&gt; con.execute('create table person (person_id integer primary key, name, height)')
&gt;&gt;&gt; con.execute('insert into person values (null, ?, ?)', ('Jean-Luc', 187)).lastrowid
1
&gt;&gt;&gt; con.execute('select * from person').fetchall()
[(1, 'Jean-Luc', 187)]
</code></pre>
<h3 id="mysql">MySQL</h3>
<p><strong>Has a very similar interface, with differences listed below.</strong></p>
<pre><code class="language-python"># $ pip3 install mysql-connector
from mysql import connector
&lt;con&gt; = connector.connect(host=&lt;str&gt;, …)        # `user=&lt;str&gt;, password=&lt;str&gt;, database=&lt;str&gt;`.
&lt;cursor&gt; = &lt;con&gt;.cursor()                       # Only cursor has execute method.
&lt;cursor&gt;.execute('&lt;query&gt;')                     # Can raise a subclass of connector.Error.
&lt;cursor&gt;.execute('&lt;query&gt;', &lt;list/tuple&gt;)       # Replaces '%s's in query with values.
&lt;cursor&gt;.execute('&lt;query&gt;', &lt;dict/namedtuple&gt;)  # Replaces '%(&lt;key&gt;)s's with values.
</code></pre>
<h2 id="bytes">Bytes</h2>
<p><strong>Bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.</strong></p>
<pre><code class="language-python">&lt;bytes&gt; = b'&lt;str&gt;'                       # Only accepts ASCII characters and \x00 - \xff.
&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]               # Returns int in range from 0 to 255.
&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]               # Returns bytes even if it has only one element.
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)  # Joins elements using bytes object as separator.
</code></pre>
<h3 id="encode-2">Encode</h3>
<pre><code class="language-python">&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)          # Ints must be in range from 0 to 255.
&lt;bytes&gt; = bytes(&lt;str&gt;, 'utf-8')          # Or: &lt;str&gt;.encode('utf-8')
&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, …)     # `byteorder='big/little', signed=False`.
&lt;bytes&gt; = bytes.fromhex('&lt;hex&gt;')         # Hex numbers can be separated by spaces.
</code></pre>
<h3 id="decode-2">Decode</h3>
<pre><code class="language-python">&lt;list&gt;  = list(&lt;bytes&gt;)                  # Returns ints in range from 0 to 255.
&lt;str&gt;   = str(&lt;bytes&gt;, 'utf-8')          # Or: &lt;bytes&gt;.decode('utf-8')
&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, …)     # `byteorder='big/little', signed=False`.
'&lt;hex&gt;' = &lt;bytes&gt;.hex()                  # Returns a string of hexadecimal numbers.
</code></pre>
<h3 id="read-bytes-from-file">Read Bytes from File</h3>
<pre><code class="language-python">def read_bytes(filename):
    with open(filename, 'rb') as file:
        return file.read()
</code></pre>
<h3 id="write-bytes-to-file">Write Bytes to File</h3>
<pre><code class="language-python">def write_bytes(filename, bytes_obj):
    with open(filename, 'wb') as file:
        file.write(bytes_obj)
</code></pre>
<h2 id="struct">Struct</h2>
<ul>
<li><strong>Module that performs conversions between a sequence of numbers and a bytes object.</strong></li>
<li><strong>Machine’s native type sizes and byte order are used by default.</strong></li>
</ul>
<pre><code class="language-python">from struct import pack, unpack, iter_unpack
&lt;bytes&gt;  = pack('&lt;format&gt;', &lt;num_1&gt; [, &lt;num_2&gt;, ...])
&lt;tuple&gt;  = unpack('&lt;format&gt;', &lt;bytes&gt;)
&lt;tuples&gt; = iter_unpack('&lt;format&gt;', &lt;bytes&gt;)
</code></pre>
<h3 id="example-2">Example</h3>
<pre><code class="language-python">&gt;&gt;&gt; pack('&gt;hhl', 1, 2, 3)
b'\x00\x01\x00\x02\x00\x00\x00\x03'
&gt;&gt;&gt; unpack('&gt;hhl', b'\x00\x01\x00\x02\x00\x00\x00\x03')
(1, 2, 3)
</code></pre>
<h3 id="format-3">Format</h3>
<h4 id="for-standard-type-sizes-start-format-string-with">For standard type sizes start format string with:</h4>
<ul>
<li><strong><code>'='</code> - native byte order</strong></li>
<li><strong><code>'&lt;'</code> - little-endian</strong></li>
<li><strong><code>'&gt;'</code> - big-endian (also <code>'!'</code>)</strong></li>
</ul>
<h4 id="integer-types-use-a-capital-letter-for-unsigned-type-standard-sizes-are-in-brackets">Integer types. Use a capital letter for unsigned type. Standard sizes are in brackets:</h4>
<ul>
<li><strong><code>'x'</code> - pad byte</strong></li>
<li><strong><code>'b'</code> - char (1)</strong></li>
<li><strong><code>'h'</code> - short (2)</strong></li>
<li><strong><code>'i'</code> - int (4)</strong></li>
<li><strong><code>'l'</code> - long (4)</strong></li>
<li><strong><code>'q'</code> - long long (8)</strong></li>
</ul>
<h4 id="floating-point-types">Floating point types:</h4>
<ul>
<li><strong><code>'f'</code> - float (4)</strong></li>
<li><strong><code>'d'</code> - double (8)</strong></li>
</ul>
<h2 id="array">Array</h2>
<p><strong>List that can only hold numbers of a predefined type. Available types and their sizes in bytes are listed above.</strong></p>
<pre><code class="language-python">from array import array
&lt;array&gt; = array('&lt;typecode&gt;', &lt;collection&gt;)    # Array from collection of numbers.
&lt;array&gt; = array('&lt;typecode&gt;', &lt;bytes&gt;)         # Array from bytes object.
&lt;array&gt; = array('&lt;typecode&gt;', &lt;array&gt;)         # Treats array as a sequence of numbers.
&lt;bytes&gt; = bytes(&lt;array&gt;)                       # Or: &lt;array&gt;.tobytes()
</code></pre>
<h2 id="memory-view">Memory View</h2>
<ul>
<li><strong>A sequence object that points to the memory of another object.</strong></li>
<li><strong>Each element can reference a single or multiple consecutive bytes, depending on format.</strong></li>
<li><strong>Order and number of elements can be changed with slicing.</strong></li>
</ul>
<pre><code class="language-python">&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  # Immutable if bytes, else mutable.
&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     # Returns an int or a float.
&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     # Mview with rearranged elements.
&lt;mview&gt; = &lt;mview&gt;.cast('&lt;typecode&gt;')           # Casts memoryview to the new format.
&lt;mview&gt;.release()                              # Releases the object's memory buffer.
</code></pre>
<h3 id="decode-3">Decode</h3>
<pre><code class="language-python">&lt;bin_file&gt;.write(&lt;mview&gt;)                      # Writes mview to the binary file.
&lt;bytes&gt; = bytes(&lt;mview&gt;)                       # Creates a new bytes object.
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       # Joins mviews using bytes object as sep.
&lt;array&gt; = array('&lt;typecode&gt;', &lt;mview&gt;)         # Treats mview as a sequence of numbers.
</code></pre>
<pre><code class="language-python">&lt;list&gt;  = list(&lt;mview&gt;)                        # Returns list of ints or floats.
&lt;str&gt;   = str(&lt;mview&gt;, 'utf-8')                # Treats mview as a bytes object.
&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, …)           # `byteorder='big/little', signed=False`.
'&lt;hex&gt;' = &lt;mview&gt;.hex()                        # Treats mview as a bytes object.
</code></pre>
<h2 id="deque">Deque</h2>
<p><strong>A thread-safe list with efficient appends and pops from either side. Pronounced &quot;deck&quot;.</strong></p>
<pre><code class="language-python">from collections import deque
&lt;deque&gt; = deque(&lt;collection&gt;, maxlen=None)
</code></pre>
<pre><code class="language-python">&lt;deque&gt;.appendleft(&lt;el&gt;)                       # Opposite element is dropped if full.
&lt;deque&gt;.extendleft(&lt;collection&gt;)               # Collection gets reversed.
&lt;el&gt; = &lt;deque&gt;.popleft()                       # Raises IndexError if empty.
&lt;deque&gt;.rotate(n=1)                            # Rotates elements to the right.
</code></pre>
<h2 id="threading">Threading</h2>
<ul>
<li><strong>CPython interpreter can only run a single thread at a time.</strong></li>
<li><strong>That is why using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation.</strong></li>
</ul>
<pre><code class="language-python">from threading import Thread, RLock, Semaphore, Event, Barrier
</code></pre>
<h3 id="thread">Thread</h3>
<pre><code class="language-python">&lt;Thread&gt; = Thread(target=&lt;function&gt;)  # Use `args=&lt;collection&gt;` to set arguments.
&lt;Thread&gt;.start()                      # Starts the thread.
&lt;bool&gt; = &lt;Thread&gt;.is_alive()          # Checks if thread has finished executing.
&lt;Thread&gt;.join()                       # Waits for thread to finish.
</code></pre>
<ul>
<li><strong>Use <code>'kwargs=&lt;dict&gt;'</code> to pass keyword arguments to the function.</strong></li>
<li><strong>Use <code>'daemon=True'</code>, or the program will not be able to exit while the thread is alive.</strong></li>
</ul>
<h3 id="lock">Lock</h3>
<pre><code class="language-python">&lt;lock&gt; = RLock()
&lt;lock&gt;.acquire()                      # Waits for lock to be available.
&lt;lock&gt;.release()                      # Makes the lock available again.
</code></pre>
<h4 id="or-2">Or:</h4>
<pre><code class="language-python">lock = RLock()
with lock:
    ...
</code></pre>
<h3 id="semaphore-event-barrier">Semaphore, Event, Barrier</h3>
<pre><code class="language-python">&lt;Semaphore&gt; = Semaphore(value=1)      # Lock that can be acquired 'value' times.
&lt;Event&gt;     = Event()                 # Method wait() blocks until set() is called.
&lt;Barrier&gt;   = Barrier(n_times)        # Method wait() blocks until it's called 'n_times'.
</code></pre>
<h3 id="thread-pool-executor">Thread Pool Executor</h3>
<pre><code class="language-python">from concurrent.futures import ThreadPoolExecutor
with ThreadPoolExecutor(max_workers=None) as executor:         # Does not exit until done.
    &lt;iter&gt;   = executor.map(lambda x: x + 1, range(3))         # (1, 2, 3)
    &lt;iter&gt;   = executor.map(lambda x, y: x + y, 'abc', '123')  # ('a1', 'b2', 'c3')
    &lt;Future&gt; = executor.submit(&lt;function&gt; [, &lt;arg_1&gt;, ...])    # Also visible outside block.
</code></pre>
<h4 id="future">Future:</h4>
<pre><code class="language-python">&lt;bool&gt; = &lt;Future&gt;.done()              # Checks if thread has finished executing.
&lt;obj&gt;  = &lt;Future&gt;.result()            # Waits for thread to finish and returns result.
</code></pre>
<h3 id="queue">Queue</h3>
<p><strong>A thread-safe FIFO queue. For LIFO queue use LifoQueue.</strong></p>
<pre><code class="language-python">from queue import Queue
&lt;Queue&gt; = Queue(maxsize=0)
</code></pre>
<pre><code class="language-python">&lt;Queue&gt;.put(&lt;el&gt;)                     # Blocks until queue stops being full.
&lt;Queue&gt;.put_nowait(&lt;el&gt;)              # Raises queue.Full exception if full.
&lt;el&gt; = &lt;Queue&gt;.get()                  # Blocks until queue stops being empty.
&lt;el&gt; = &lt;Queue&gt;.get_nowait()           # Raises queue.Empty exception if empty.
</code></pre>
<h2 id="operator">Operator</h2>
<p><strong>Module of functions that provide the functionality of operators.</strong></p>
<pre><code class="language-python">from operator import add, sub, mul, truediv, floordiv, mod, pow, neg, abs
from operator import eq, ne, lt, le, gt, ge
from operator import and_, or_, not_
from operator import itemgetter, attrgetter, methodcaller
</code></pre>
<pre><code class="language-python">import operator as op
elementwise_sum  = map(op.add, list_a, list_b)
sorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(1))
sorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(1, 0))
product_of_elems = functools.reduce(op.mul, &lt;collection&gt;)
LogicOp          = enum.Enum('LogicOp', {'AND': op.and_, 'OR' : op.or_})
last_el          = op.methodcaller('pop')(&lt;list&gt;)
</code></pre>
<h2 id="introspection">Introspection</h2>
<p><strong>Inspecting code at runtime.</strong></p>
<h3 id="variables">Variables</h3>
<pre><code class="language-python">&lt;list&gt; = dir()                             # Names of local variables (incl. functions).
&lt;dict&gt; = vars()                            # Dict of local variables. Also locals().
&lt;dict&gt; = globals()                         # Dict of global variables.
</code></pre>
<h3 id="attributes-2">Attributes</h3>
<pre><code class="language-python">&lt;list&gt; = dir(&lt;object&gt;)                     # Names of object's attributes (incl. methods).
&lt;dict&gt; = vars(&lt;object&gt;)                    # Dict of object's fields. Also &lt;obj&gt;.__dict__.
&lt;bool&gt; = hasattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Checks if getattr() raises an error.
value  = getattr(&lt;object&gt;, '&lt;attr_name&gt;')  # Raises AttributeError if attribute is missing.
setattr(&lt;object&gt;, '&lt;attr_name&gt;', value)    # Only works on objects with __dict__ attribute.
delattr(&lt;object&gt;, '&lt;attr_name&gt;')           # Equivalent to `del &lt;object&gt;.&lt;attr_name&gt;`.
</code></pre>
<h3 id="parameters-2">Parameters</h3>
<pre><code class="language-python">from inspect import signature
&lt;sig&gt;        = signature(&lt;function&gt;)
no_of_params = len(&lt;sig&gt;.parameters)
param_names  = list(&lt;sig&gt;.parameters.keys())
param_kinds  = [a.kind for a in &lt;sig&gt;.parameters.values()]
</code></pre>
<h2 id="metaprograming">Metaprograming</h2>
<p><strong>Code that generates code.</strong></p>
<h3 id="type-2">Type</h3>
<p><strong>Type is the root class. If only passed an object it returns its type (class). Otherwise it creates a new class.</strong></p>
<pre><code class="language-python">&lt;class&gt; = type('&lt;class_name&gt;', &lt;parents_tuple&gt;, &lt;attributes_dict&gt;)
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; Z = type('Z', (), {'a': 'abcde', 'b': 12345})
&gt;&gt;&gt; z = Z()
</code></pre>
<h3 id="meta-class">Meta Class</h3>
<p><strong>A class that creates classes.</strong></p>
<pre><code class="language-python">def my_meta_class(name, parents, attrs):
    attrs['a'] = 'abcde'
    return type(name, parents, attrs)
</code></pre>
<h4 id="or-3">Or:</h4>
<pre><code class="language-python">class MyMetaClass(type):
    def __new__(cls, name, parents, attrs):
        attrs['a'] = 'abcde'
        return type.__new__(cls, name, parents, attrs)
</code></pre>
<ul>
<li><strong>New() is a class method that gets called before init(). If it returns an instance of its class, then that instance gets passed to init() as a 'self' argument.</strong></li>
<li><strong>It receives the same arguments as init(), except for the first one that specifies the desired type of the returned instance (MyMetaClass in our case).</strong></li>
<li><strong>Like in our case, new() can also be called directly, usually from a new() method of a child class (</strong><code>def __new__(cls): return super().__new__(cls)</code><strong>).</strong></li>
<li><strong>The only difference between the examples above is that my_meta_class() returns a class of type type, while MyMetaClass() returns a class of type MyMetaClass.</strong></li>
</ul>
<h3 id="metaclass-attribute">Metaclass Attribute</h3>
<p><strong>Right before a class is created it checks if it has the 'metaclass' attribute defined. If not, it recursively checks if any of his parents has it defined and eventually comes to type().</strong></p>
<pre><code class="language-python">class MyClass(metaclass=MyMetaClass):
    b = 12345
</code></pre>
<pre><code class="language-python">&gt;&gt;&gt; MyClass.a, MyClass.b
('abcde', 12345)
</code></pre>
<h3 id="type-diagram">Type Diagram</h3>
<pre><code class="language-python">type(MyClass)     == MyMetaClass     # MyClass is an instance of MyMetaClass.
type(MyMetaClass) == type            # MyMetaClass is an instance of type.
</code></pre>
<pre><code class="language-text">+-------------+-------------+
|   Classes   | Metaclasses |
+-------------+-------------|
|   MyClass --&gt; MyMetaClass |
|             |     v       |
|    object -----&gt; type &lt;+  |
|             |     ^ +--+  |
|     str ----------+       |
+-------------+-------------+
</code></pre>
<h3 id="inheritance-diagram">Inheritance Diagram</h3>
<pre><code class="language-python">MyClass.__base__     == object       # MyClass is a subclass of object.
MyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.
</code></pre>
<pre><code class="language-text">+-------------+-------------+
|   Classes   | Metaclasses |
+-------------+-------------|
|   MyClass   | MyMetaClass |
|      v      |     v       |
|    object &lt;----- type     |
|      ^      |             |
|     str     |             |
+-------------+-------------+
</code></pre>
<h2 id="eval">Eval</h2>
<pre><code class="language-python">&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval('1 + 2')
3
&gt;&gt;&gt; literal_eval('[1, 2, 3]')
[1, 2, 3]
&gt;&gt;&gt; literal_eval('abs(1)')
ValueError: malformed node or string
</code></pre>
<h2 id="coroutines">Coroutines</h2>
<ul>
<li><strong>Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they don’t use as much memory.</strong></li>
<li><strong>Coroutine definition starts with <code>'async'</code> and its call with <code>'await'</code>.</strong></li>
<li><strong><code>'asyncio.run(&lt;coroutine&gt;)'</code> is the main entry point for asynchronous programs.</strong></li>
<li><strong>Functions wait(), gather() and as_completed() can be used when multiple coroutines need to be started at the same time.</strong></li>
<li><strong>Asyncio module also provides its own <a href="#queue">Queue</a>, <a href="#semaphore-event-barrier">Event</a>, <a href="#lock">Lock</a> and <a href="#semaphore-event-barrier">Semaphore</a> classes.</strong></li>
</ul>
<h4 id="runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers">Runs a terminal game where you control an asterisk that must avoid numbers:</h4>
<pre><code class="language-python">import asyncio, collections, curses, enum, random

P = collections.namedtuple('P', 'x y')         # Position
D = enum.Enum('D', 'n e s w')                  # Direction

def main(screen):
    curses.curs_set(0)                         # Makes cursor invisible.
    screen.nodelay(True)                       # Makes getch() non-blocking.
    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.

async def main_coroutine(screen):
    state = {'*': P(0, 0), **{id_: P(30, 10) for id_ in range(10)}}
    moves = asyncio.Queue()
    coros = (*(random_controller(id_, moves) for id_ in range(10)),
             human_controller(screen, moves),
             model(moves, state, *screen.getmaxyx()),
             view(state, screen))
    await asyncio.wait(coros, return_when=asyncio.FIRST_COMPLETED)

async def random_controller(id_, moves):
    while True:
        moves.put_nowait((id_, random.choice(list(D))))
        await asyncio.sleep(random.random() / 2)

async def human_controller(screen, moves):
    while True:
        ch = screen.getch()
        key_mappings = {259: D.n, 261: D.e, 258: D.s, 260: D.w}
        if ch in key_mappings:
            moves.put_nowait(('*', key_mappings[ch]))
        await asyncio.sleep(0.01)  

async def model(moves, state, height, width):
    while state['*'] not in {p for id_, p in state.items() if id_ != '*'}:
        id_, d = await moves.get()
        p      = state[id_]
        deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}
        new_p  = P(*[sum(a) for a in zip(p, deltas[d])])
        if 0 &lt;= new_p.x &lt; width-1 and 0 &lt;= new_p.y &lt; height:
            state[id_] = new_p

async def view(state, screen):
    while True:
        screen.clear()
        for id_, p in state.items():
            screen.addstr(p.y, p.x, str(id_))
        await asyncio.sleep(0.01)  

curses.wrapper(main)
</code></pre>
<br>
<h1 id="libraries">Libraries</h1>
<h2 id="progress-bar">Progress Bar</h2>
<pre><code class="language-python"># $ pip3 install tqdm
from tqdm import tqdm
from time import sleep
for el in tqdm([1, 2, 3]):
    sleep(0.2)
</code></pre>
<h2 id="plot">Plot</h2>
<pre><code class="language-python"># $ pip3 install matplotlib
from matplotlib import pyplot
pyplot.plot(&lt;y_data&gt; [, label=&lt;str&gt;])
pyplot.plot(&lt;x_data&gt;, &lt;y_data&gt;)
pyplot.legend()                                # Adds a legend.
pyplot.savefig('&lt;path&gt;')                       # Saves the figure.
pyplot.show()                                  # Displays the figure.
pyplot.clf()                                   # Clears the figure.
</code></pre>
<h2 id="table">Table</h2>
<h4 id="prints-a-csv-file-as-an-ascii-table">Prints a CSV file as an ASCII table:</h4>
<pre><code class="language-python"># $ pip3 install tabulate
import csv, tabulate
with open('test.csv', encoding='utf-8', newline='') as file:
    rows   = csv.reader(file)
    header = [a.title() for a in next(rows)]
    table  = tabulate.tabulate(rows, header)
    print(table)
</code></pre>
<h2 id="curses">Curses</h2>
<h4 id="clears-the-terminal-prints-a-message-and-waits-for-the-esc-key-press">Clears the terminal, prints a message and waits for the ESC key press:</h4>
<pre><code class="language-python">from curses import wrapper, curs_set, ascii
from curses import KEY_UP, KEY_RIGHT, KEY_DOWN, KEY_LEFT

def main():
    wrapper(draw)

def draw(screen):
    curs_set(0)                                # Makes cursor invisible.
    screen.nodelay(True)                       # Makes getch() non-blocking.
    screen.clear()
    screen.addstr(0, 0, 'Press ESC to quit.')  # Coordinates are y, x.
    while screen.getch() != ascii.ESC:
        pass

def get_border(screen):
    from collections import namedtuple
    P = namedtuple('P', 'x y')
    height, width = screen.getmaxyx()
    return P(width-1, height-1)

if __name__ == '__main__':
    main()
</code></pre>
<h2 id="logging">Logging</h2>
<pre><code class="language-python"># $ pip3 install loguru
from loguru import logger
</code></pre>
<pre><code class="language-python">logger.add('debug_{time}.log', colorize=True)  # Connects a log file.
logger.add('error_{time}.log', level='ERROR')  # Another file for errors or higher.
logger.&lt;level&gt;('A logging message.')
</code></pre>
<ul>
<li><strong>Levels: <code>'debug'</code>, <code>'info'</code>, <code>'success'</code>, <code>'warning'</code>, <code>'error'</code>, <code>'critical'</code>.</strong></li>
</ul>
<h3 id="exceptions-3">Exceptions</h3>
<p><strong>Exception description, stack trace and values of variables are appended automatically.</strong></p>
<pre><code class="language-python">try:
    ...
except &lt;exception&gt;:
    logger.exception('An error happened.')
</code></pre>
<h3 id="rotation">Rotation</h3>
<p><strong>Argument that sets a condition when a new log file is created.</strong></p>
<pre><code class="language-python">rotation=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;datetime.time&gt;|&lt;str&gt;
</code></pre>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max file size in bytes.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a file.</strong></li>
<li><strong><code>'&lt;time&gt;'</code> - Time of day.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Any of above as a string: <code>'100 MB'</code>, <code>'1 month'</code>, <code>'monday at 12:00'</code>, ...</strong></li>
</ul>
<h3 id="retention">Retention</h3>
<p><strong>Sets a condition which old log files get deleted.</strong></p>
<pre><code class="language-python">retention=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;str&gt;
</code></pre>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max number of files.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a file.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Max age as a string: <code>'1 week, 3 days'</code>, <code>'2 months'</code>, ...</strong></li>
</ul>
<h2 id="scraping">Scraping</h2>
<h4 id="scrapes-pythons-url-version-number-and-logo-from-wikipedia-page">Scrapes Python's URL, version number and logo from Wikipedia page:</h4>
<pre><code class="language-python"># $ pip3 install requests beautifulsoup4
import requests, sys
from bs4 import BeautifulSoup
URL = 'https://en.wikipedia.org/wiki/Python_(programming_language)'
try:
    html  = requests.get(URL).text
    doc   = BeautifulSoup(html, 'html.parser')
    table = doc.find('table', class_='infobox vevent')
    rows  = table.find_all('tr')
    link  = rows[11].find('a')['href']
    ver   = rows[6].find('div').text.split()[0]
    url_i = rows[0].find('img')['src']
    image = requests.get(f'https:{url_i}').content
    with open('test.png', 'wb') as file:
        file.write(image)
    print(link, ver)
except requests.exceptions.ConnectionError:
    print(&quot;You've got problems with connection.&quot;, file=sys.stderr)
</code></pre>
<h2 id="web">Web</h2>
<pre><code class="language-python"># $ pip3 install bottle
from bottle import run, route, static_file, template, post, request, response
import json
</code></pre>
<h3 id="run">Run</h3>
<pre><code class="language-python">run(host='localhost', port=8080)        # Runs locally.
run(host='0.0.0.0', port=80)            # Runs globally.
</code></pre>
<h3 id="static-request">Static Request</h3>
<pre><code class="language-python">@route('/img/&lt;image&gt;')
def send_image(image):
    return static_file(image, 'img_dir/', mimetype='image/png')
</code></pre>
<h3 id="dynamic-request">Dynamic Request</h3>
<pre><code class="language-python">@route('/&lt;sport&gt;')
def send_page(sport):
    return template('&lt;h1&gt;{{title}}&lt;/h1&gt;', title=sport)
</code></pre>
<h3 id="rest-request">REST Request</h3>
<pre><code class="language-python">@post('/odds/&lt;sport&gt;')
def odds_handler(sport):
    team = request.forms.get('team')
    home_odds, away_odds = 2.44, 3.29
    response.headers['Content-Type'] = 'application/json'
    response.headers['Cache-Control'] = 'no-cache'
    return json.dumps([team, home_odds, away_odds])
</code></pre>
<h4 id="test">Test:</h4>
<pre><code class="language-python"># $ pip3 install requests
&gt;&gt;&gt; import requests
&gt;&gt;&gt; url  = 'http://localhost:8080/odds/football'
&gt;&gt;&gt; data = {'team': 'arsenal f.c.'}
&gt;&gt;&gt; response = requests.post(url, data=data)
&gt;&gt;&gt; response.json()
['arsenal f.c.', 2.44, 3.29]
</code></pre>
<h2 id="profiling">Profiling</h2>
<h3 id="stopwatch">Stopwatch</h3>
<pre><code class="language-python">from time import time
start_time = time()                     # Seconds since the Epoch.
...
duration = time() - start_time
</code></pre>
<h4 id="high-performance">High performance:</h4>
<pre><code class="language-python">from time import perf_counter
start_time = perf_counter()             # Seconds since restart.
...
duration = perf_counter() - start_time
</code></pre>
<h3 id="timing-a-snippet">Timing a Snippet</h3>
<pre><code class="language-python">&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('&quot;-&quot;.join(str(a) for a in range(100))',
...        number=10000, globals=globals(), setup='pass')
0.34986
</code></pre>
<h3 id="profiling-by-line">Profiling by Line</h3>
<pre><code class="language-python"># $ pip3 install line_profiler memory_profiler
@profile
def main():
    a = [*range(10000)]
    b = {*range(10000)}
main()
</code></pre>
<pre><code class="language-text">$ kernprof -lv test.py
Line #   Hits     Time  Per Hit   % Time  Line Contents
=======================================================
     1                                    @profile
     2                                    def main():
     3      1   1128.0   1128.0     27.4      a = [*range(10000)]
     4      1   2994.0   2994.0     72.6      b = {*range(10000)}
</code></pre>
<pre><code class="language-text">$ python3 -m memory_profiler test.py
Line #         Mem usage      Increment   Line Contents
=======================================================
     1        35.387 MiB     35.387 MiB   @profile
     2                                    def main():
     3        35.734 MiB      0.348 MiB       a = [*range(10000)]
     4        36.160 MiB      0.426 MiB       b = {*range(10000)}
</code></pre>
<h3 id="call-graph">Call Graph</h3>
<h4 id="generates-a-png-image-of-a-call-graph-with-highlighted-bottlenecks">Generates a PNG image of a call graph with highlighted bottlenecks:</h4>
<pre><code class="language-python"># $ pip3 install pycallgraph
from pycallgraph import output, PyCallGraph
from datetime import datetime
time_str = datetime.now().strftime('%Y%m%d%H%M%S')
filename = f'profile-{time_str}.png'
drawer = output.GraphvizOutput(output_file=filename)
with PyCallGraph(drawer):
    &lt;code_to_be_profiled&gt;
</code></pre>
<h2 id="numpy">NumPy</h2>
<p><strong>Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code.</strong></p>
<pre><code class="language-python"># $ pip3 install numpy
import numpy as np
</code></pre>
<pre><code class="language-python">&lt;array&gt; = np.array(&lt;list&gt;)
&lt;array&gt; = np.arange(from_inclusive, to_exclusive, ±step_size)
&lt;array&gt; = np.ones(&lt;shape&gt;)
&lt;array&gt; = np.random.randint(from_inclusive, to_exclusive, &lt;shape&gt;)
</code></pre>
<pre><code class="language-python">&lt;array&gt;.shape = &lt;shape&gt;
&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)
&lt;view&gt;  = np.broadcast_to(&lt;array&gt;, &lt;shape&gt;)
</code></pre>
<pre><code class="language-python">&lt;array&gt; = &lt;array&gt;.sum(axis)
indexes = &lt;array&gt;.argmin(axis)
</code></pre>
<ul>
<li><strong>Shape is a tuple of dimension sizes.</strong></li>
<li><strong>Axis is the index of a dimension that gets collapsed. The leftmost dimension has index 0.</strong></li>
</ul>
<h3 id="indexing">Indexing</h3>
<pre><code class="language-bash">&lt;el&gt;       = &lt;2d_array&gt;[0, 0]        # First element.
&lt;1d_view&gt;  = &lt;2d_array&gt;[0]           # First row.
&lt;1d_view&gt;  = &lt;2d_array&gt;[:, 0]        # First column. Also [..., 0].
&lt;3d_view&gt;  = &lt;2d_array&gt;[None, :, :]  # Expanded by dimension of size 1.
</code></pre>
<pre><code class="language-bash">&lt;1d_array&gt; = &lt;2d_array&gt;[&lt;1d_row_indexes&gt;, &lt;1d_column_indexes&gt;]
&lt;2d_array&gt; = &lt;2d_array&gt;[&lt;2d_row_indexes&gt;, &lt;2d_column_indexes&gt;]
</code></pre>
<pre><code class="language-bash">&lt;2d_bools&gt; = &lt;2d_array&gt; &gt; 0
&lt;1d_array&gt; = &lt;2d_array&gt;[&lt;2d_bools&gt;]
</code></pre>
<ul>
<li><strong>If row and column indexes differ in shape, they are combined with broadcasting.</strong></li>
</ul>
<h3 id="broadcasting">Broadcasting</h3>
<p><strong>Broadcasting is a set of rules by which NumPy functions operate on arrays of different sizes and/or dimensions.</strong></p>
<pre><code class="language-python">left  = [[0.1], [0.6], [0.8]]        # Shape: (3, 1)
right = [ 0.1 ,  0.6 ,  0.8 ]        # Shape: (3)
</code></pre>
<h4 id="1-if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones">1. If array shapes differ in length, left-pad the shorter shape with ones:</h4>
<pre><code class="language-python">left  = [[0.1], [0.6], [0.8]]        # Shape: (3, 1)
right = [[0.1 ,  0.6 ,  0.8]]        # Shape: (1, 3) &lt;- !
</code></pre>
<h4 id="2-if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements">2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:</h4>
<pre><code class="language-python">left  = [[0.1, 0.1, 0.1], [0.6, 0.6, 0.6], [0.8, 0.8, 0.8]]  # Shape: (3, 3) &lt;- !
right = [[0.1, 0.6, 0.8], [0.1, 0.6, 0.8], [0.1, 0.6, 0.8]]  # Shape: (3, 3) &lt;- !
</code></pre>
<h4 id="3-if-neither-non-matching-dimension-has-size-1-raise-an-error">3. If neither non-matching dimension has size 1, raise an error.</h4>
<h3 id="example-3">Example</h3>
<h4 id="for-each-point-returns-index-of-its-nearest-point-01-06-08-1-2-1">For each point returns index of its nearest point (<code>[0.1, 0.6, 0.8] =&gt; [1, 2, 1]</code>):</h4>
<pre><code class="language-python">&gt;&gt;&gt; points = np.array([0.1, 0.6, 0.8])
 [ 0.1,  0.6,  0.8]
&gt;&gt;&gt; wrapped_points = points.reshape(3, 1)
[[ 0.1],
 [ 0.6],
 [ 0.8]]
&gt;&gt;&gt; distances = wrapped_points - points
[[ 0. , -0.5, -0.7],
 [ 0.5,  0. , -0.2],
 [ 0.7,  0.2,  0. ]]
&gt;&gt;&gt; distances = np.abs(distances)
[[ 0. ,  0.5,  0.7],
 [ 0.5,  0. ,  0.2],
 [ 0.7,  0.2,  0. ]]
&gt;&gt;&gt; i = np.arange(3)
[0, 1, 2]
&gt;&gt;&gt; distances[i, i] = np.inf
[[ inf,  0.5,  0.7],
 [ 0.5,  inf,  0.2],
 [ 0.7,  0.2,  inf]]
&gt;&gt;&gt; distances.argmin(1)
[1, 2, 1]
</code></pre>
<h2 id="image">Image</h2>
<pre><code class="language-python"># $ pip3 install pillow
from PIL import Image
</code></pre>
<pre><code class="language-python">&lt;Image&gt; = Image.new('&lt;mode&gt;', (width, height))
&lt;Image&gt; = Image.open('&lt;path&gt;')
&lt;Image&gt; = &lt;Image&gt;.convert('&lt;mode&gt;')
&lt;Image&gt;.save('&lt;path&gt;')
&lt;Image&gt;.show()
</code></pre>
<pre><code class="language-python">&lt;tuple/int&gt; = &lt;Image&gt;.getpixel((x, y))          # Returns a pixel.
&lt;Image&gt;.putpixel((x, y), &lt;tuple/int&gt;)           # Writes a pixel to the image.
&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()               # Returns a sequence of pixels.
&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)             # Writes a sequence of pixels.
&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                  # Writes an image to the image.
</code></pre>
<pre><code class="language-bash">&lt;2d_array&gt; = np.array(&lt;Image&gt;)                  # Creates NumPy array from greyscale image.
&lt;3d_array&gt; = np.array(&lt;Image&gt;)                  # Creates NumPy array from color image.
&lt;Image&gt;    = Image.fromarray(&lt;array&gt;)           # Creates image from NumPy array of floats.
</code></pre>
<h3 id="modes-2">Modes</h3>
<ul>
<li><strong><code>'1'</code> - 1-bit pixels, black and white, stored with one pixel per byte.</strong></li>
<li><strong><code>'L'</code> - 8-bit pixels, greyscale.</strong></li>
<li><strong><code>'RGB'</code> - 3x8-bit pixels, true color.</strong></li>
<li><strong><code>'RGBA'</code> - 4x8-bit pixels, true color with transparency mask.</strong></li>
<li><strong><code>'HSV'</code> - 3x8-bit pixels, Hue, Saturation, Value color space.</strong></li>
</ul>
<h3 id="examples">Examples</h3>
<h4 id="creates-a-png-image-of-a-rainbow-gradient">Creates a PNG image of a rainbow gradient:</h4>
<pre><code class="language-python">WIDTH, HEIGHT = 100, 100
size = WIDTH * HEIGHT
hues = [255 * i/size for i in range(size)]
img = Image.new('HSV', (WIDTH, HEIGHT))
img.putdata([(int(h), 255, 255) for h in hues])
img.convert('RGB').save('test.png')
</code></pre>
<h4 id="adds-noise-to-a-png-image">Adds noise to a PNG image:</h4>
<pre><code class="language-python">from random import randint
add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))
img = Image.open('test.png').convert('HSV')
img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])
img.convert('RGB').save('test.png')
</code></pre>
<h3 id="drawing">Drawing</h3>
<pre><code class="language-python">from PIL import ImageDraw
</code></pre>
<pre><code class="language-python">&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)
&lt;ImageDraw&gt;.point((x, y), fill=None)
&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]), fill=None, width=0, joint=None) 
&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), from_deg, to_deg, fill=None, width=0)
&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2), fill=None, outline=None, width=0)
&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2 [, ...]), fill=None, outline=None)
&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2), fill=None, outline=None, width=0)
</code></pre>
<ul>
<li><strong>Use <code>'fill=&lt;color&gt;'</code> to set the primary color.</strong></li>
<li><strong>Use <code>'outline=&lt;color&gt;'</code> to set the secondary color.</strong></li>
<li><strong>Color can be specified as a tuple, int, <code>'#rrggbb'</code> string or a color name.</strong></li>
</ul>
<h2 id="animation">Animation</h2>
<h4 id="creates-a-gif-of-a-bouncing-ball">Creates a GIF of a bouncing ball:</h4>
<pre><code class="language-python"># $ pip3 install pillow imageio
from PIL import Image, ImageDraw
import imageio
WIDTH, R = 126, 10
frames = []
for velocity in range(15):
    y = sum(range(velocity+1))
    frame = Image.new('L', (WIDTH, WIDTH))
    draw  = ImageDraw.Draw(frame)
    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill='white')
    frames.append(frame)
frames += reversed(frames[1:-1])
imageio.mimsave('test.gif', frames, duration=0.03)
</code></pre>
<h2 id="audio">Audio</h2>
<pre><code class="language-python">import wave
</code></pre>
<pre><code class="language-python">&lt;Wave_read&gt;  = wave.open('&lt;path&gt;', 'rb')        # Opens the WAV file.
framerate    = &lt;Wave_read&gt;.getframerate()       # Number of frames per second.
nchannels    = &lt;Wave_read&gt;.getnchannels()       # Number of samples per frame.
sampwidth    = &lt;Wave_read&gt;.getsampwidth()       # Sample size in bytes.
nframes      = &lt;Wave_read&gt;.getnframes()         # Number of frames.
&lt;params&gt;     = &lt;Wave_read&gt;.getparams()          # Immutable collection of above.
&lt;bytes&gt;      = &lt;Wave_read&gt;.readframes(nframes)  # Returns next 'nframes' frames.
</code></pre>
<pre><code class="language-python">&lt;Wave_write&gt; = wave.open('&lt;path&gt;', 'wb')        # Truncates existing file.
&lt;Wave_write&gt;.setframerate(&lt;int&gt;)                # 44100 for CD, 48000 for video.
&lt;Wave_write&gt;.setnchannels(&lt;int&gt;)                # 1 for mono, 2 for stereo.
&lt;Wave_write&gt;.setsampwidth(&lt;int&gt;)                # 2 for CD quality sound.
&lt;Wave_write&gt;.setparams(&lt;params&gt;)                # Sets all parameters.
&lt;Wave_write&gt;.writeframes(&lt;bytes&gt;)               # Appends frames to the file.
</code></pre>
<ul>
<li><strong>Bytes object contains a sequence of frames, each consisting of one or more samples.</strong></li>
<li><strong>In a stereo signal, the first sample of a frame belongs to the left channel.</strong></li>
<li><strong>Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.</strong></li>
<li><strong>If sample width is one, then the integer should be encoded unsigned.</strong></li>
<li><strong>For all other sizes, the integer should be encoded signed with little-endian byte order.</strong></li>
</ul>
<h3 id="sample-values">Sample Values</h3>
<pre><code class="language-text">+-----------+-------------+------+-------------+
| sampwidth |     min     | zero |     max     |
+-----------+-------------+------+-------------+
|     1     |           0 |  128 |         255 |
|     2     |      -32768 |    0 |       32767 |
|     3     |    -8388608 |    0 |     8388607 |
|     4     | -2147483648 |    0 |  2147483647 |
+-----------+-------------+------+-------------+
</code></pre>
<h3 id="read-float-samples-from-wav-file">Read Float Samples from WAV File</h3>
<pre><code class="language-python">def read_wav_file(filename):
    def get_int(a_bytes):
        an_int = int.from_bytes(a_bytes, 'little', signed=width!=1)
        return an_int - 128 * (width == 1)
    with wave.open(filename, 'rb') as file:
        width  = file.getsampwidth()
        frames = file.readframes(file.getnframes())
    byte_samples = (frames[i: i + width] for i in range(0, len(frames), width))
    return [get_int(b) / pow(2, width * 8 - 1) for b in byte_samples]
</code></pre>
<h3 id="write-float-samples-to-wav-file">Write Float Samples to WAV File</h3>
<pre><code class="language-python">def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):
    def get_bytes(a_float):
        a_float = max(-1, min(1 - 2e-16, a_float))
        a_float += sampwidth == 1
        a_float *= pow(2, sampwidth * 8 - 1)
        return int(a_float).to_bytes(sampwidth, 'little', signed=sampwidth!=1) 
    with wave.open(filename, 'wb') as file:
        file.setnchannels(nchannels)
        file.setsampwidth(sampwidth)
        file.setframerate(framerate)
        file.writeframes(b''.join(get_bytes(f) for f in float_samples))
</code></pre>
<h3 id="examples-2">Examples</h3>
<h4 id="saves-a-sine-wave-to-a-mono-wav-file">Saves a sine wave to a mono WAV file:</h4>
<pre><code class="language-python">from math import pi, sin
samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))
write_to_wav_file('test.wav', samples_f)
</code></pre>
<h4 id="adds-noise-to-a-mono-wav-file">Adds noise to a mono WAV file:</h4>
<pre><code class="language-python">from random import random
add_noise = lambda value: value + (random() - 0.5) * 0.03
samples_f = (add_noise(f) for f in read_wav_file('test.wav'))
write_to_wav_file('test.wav', samples_f)
</code></pre>
<h4 id="plays-a-wav-file">Plays a WAV file:</h4>
<pre><code class="language-python"># $ pip3 install simpleaudio
from simpleaudio import play_buffer
with wave.open('test.wav', 'rb') as file:
    p = file.getparams()
    frames = file.readframes(p.nframes)
    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)
</code></pre>
<h3 id="text-to-speech">Text to Speech</h3>
<pre><code class="language-python"># $ pip3 install pyttsx3
import pyttsx3
engine = pyttsx3.init()
engine.say('Sally sells seashells by the seashore.')
engine.runAndWait()
</code></pre>
<h2 id="synthesizer">Synthesizer</h2>
<h4 id="plays-popcorn-by-gershon-kingsley">Plays Popcorn by Gershon Kingsley:</h4>
<pre><code class="language-python"># $ pip3 install simpleaudio
import simpleaudio, math, struct
from itertools import chain, repeat
F  = 44100
P1 = '71♪,69,,71♪,66,,62♪,66,,59♪,,,'
P2 = '71♪,73,,74♪,73,,74,,71,,73♪,71,,73,,69,,71♪,69,,71,,67,,71♪,,,'
get_pause   = lambda seconds: repeat(0, int(seconds * F))
sin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)
get_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))
get_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)
parse_note  = lambda note: (get_hz(note[:2]), 0.25 if '♪' in note else 0.125)
get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(0.125)
samples_f   = chain.from_iterable(get_samples(n) for n in f'{P1}{P1}{P2}'.split(','))
samples_b   = b''.join(struct.pack('&lt;h', int(f * 30000)) for f in samples_f)
simpleaudio.play_buffer(samples_b, 1, 2, F)
</code></pre>
<h2 id="pygame">Pygame</h2>
<h3 id="basic-example-2">Basic Example</h3>
<pre><code class="language-python"># $ pip3 install pygame
import pygame as pg
pg.init()
screen = pg.display.set_mode((500, 500))
rect = pg.Rect(240, 240, 20, 20)
while all(event.type != pg.QUIT for event in pg.event.get()):
    deltas = {pg.K_UP: (0, -3), pg.K_RIGHT: (3, 0), pg.K_DOWN: (0, 3), pg.K_LEFT: (-3, 0)}
    for delta in (deltas.get(i) for i, on in enumerate(pg.key.get_pressed()) if on):
        rect = rect.move(delta) if delta else rect
    screen.fill((0, 0, 0))
    pg.draw.rect(screen, (255, 255, 255), rect)
    pg.display.flip()
</code></pre>
<h3 id="rectangle">Rectangle</h3>
<p><strong>Object for storing rectangular coordinates.</strong></p>
<pre><code class="language-python">&lt;Rect&gt; = pg.Rect(x, y, width, height)           # X and y are coordinates of topleft corner.
&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/…           # Top, right, bottom, left.
&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/…                # Topright, bottomright, bottomleft.
&lt;Rect&gt; = &lt;Rect&gt;.move((x, y))                    # Use move_ip() to move in place.
</code></pre>
<pre><code class="language-python">&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            # Tests if a point is inside a rectangle.
&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             # Tests if two rectangles overlap.
&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     # Returns index of first colliding Rect or -1.
&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  # Returns indexes of all colliding Rects.
</code></pre>
<h3 id="surface">Surface</h3>
<p><strong>Object for representing images.</strong></p>
<pre><code class="language-python">&lt;Surf&gt; = pg.display.set_mode((width, height))   # Returns the display surface.
&lt;Surf&gt; = pg.Surface((width, height))            # Creates a new surface.
&lt;Surf&gt; = pg.image.load('&lt;path&gt;')                # Loads the image.
&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              # Returns a subsurface.
</code></pre>
<pre><code class="language-python">&lt;Surf&gt;.fill(color)                              # Fills the whole surface.
&lt;Surf&gt;.set_at((x, y), color)                    # Updates pixel.
&lt;Surf&gt;.blit(&lt;Surface&gt;, (x, y))                  # Draws passed surface to the surface.
</code></pre>
<pre><code class="language-python">&lt;Surf&gt; = pg.transform.flip(&lt;Surf&gt;, xbool, ybool)
&lt;Surf&gt; = pg.transform.rotate(&lt;Surf&gt;, degrees)
&lt;Surf&gt; = pg.transform.scale(&lt;Surf&gt;, (width, height))
</code></pre>
<pre><code class="language-python">pg.draw.line(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)
pg.draw.arc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_radians, to_radians)
pg.draw.rect(&lt;Surf&gt;, color, &lt;Rect&gt;)
pg.draw.polygon(&lt;Surf&gt;, color, points)
pg.draw.ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;)
</code></pre>
<h3 id="font">Font</h3>
<pre><code class="language-python">&lt;Font&gt; = pg.font.SysFont('&lt;name&gt;', size, bold=False, italic=False)
&lt;Font&gt; = pg.font.Font('&lt;path&gt;', size)
&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color, background=None)
</code></pre>
<h3 id="sound">Sound</h3>
<pre><code class="language-python">&lt;Sound&gt; = pg.mixer.Sound('&lt;path&gt;')              # Loads the WAV file.
&lt;Sound&gt;.play()                                  # Starts playing the sound.
</code></pre>
<h3 id="basic-mario-brothers-example">Basic Mario Brothers Example</h3>
<pre><code class="language-python">import collections, dataclasses, enum, io, pygame, urllib.request, itertools as it
from random import randint

P = collections.namedtuple('P', 'x y')          # Position
D = enum.Enum('D', 'n e s w')                   # Direction
SIZE, MAX_SPEED = 50, P(5, 10)                  # Screen size, Speed limit

def main():
    def get_screen():
        pygame.init()
        return pygame.display.set_mode(2 * [SIZE*16])
    def get_images():
        url = 'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'
        img = pygame.image.load(io.BytesIO(urllib.request.urlopen(url).read()))
        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]
    def get_mario():
        Mario = dataclasses.make_dataclass('Mario', 'rect spd facing_left frame_cycle'.split())
        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))
    def get_tiles():
        positions = [p for p in it.product(range(SIZE), repeat=2) if {*p} &amp; {0, SIZE-1}] + \
            [(randint(1, SIZE-2), randint(2, SIZE-2)) for _ in range(SIZE**2 // 10)]
        return [get_rect(*p) for p in positions]
    def get_rect(x, y):
        return pygame.Rect(x*16, y*16, 16, 16)
    run(get_screen(), get_images(), get_mario(), get_tiles())

def run(screen, images, mario, tiles):
    clock = pygame.time.Clock()
    while all(event.type != pygame.QUIT for event in pygame.event.get()):
        keys = {pygame.K_UP: D.n, pygame.K_RIGHT: D.e, pygame.K_DOWN: D.s, pygame.K_LEFT: D.w}
        pressed = {keys.get(i) for i, on in enumerate(pygame.key.get_pressed()) if on}
        update_speed(mario, tiles, pressed)
        update_position(mario, tiles)
        draw(screen, images, mario, tiles, pressed)
        clock.tick(28)

def update_speed(mario, tiles, pressed):
    x, y = mario.spd
    x += 2 * ((D.e in pressed) - (D.w in pressed))
    x -= x // abs(x) if x else 0
    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (-10 if D.n in pressed else 0)
    mario.spd = P(*[max(-limit, min(limit, s)) for limit, s in zip(MAX_SPEED, P(x, y))])

def update_position(mario, tiles):
    new_p = mario.rect.topleft
    larger_speed = max(abs(s) for s in mario.spd)
    for _ in range(larger_speed):
        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))
        new_p = P(*[a + s/larger_speed for a, s in zip(new_p, mario.spd)])
        mario.rect.topleft = new_p

def get_boundaries(rect, tiles):
    deltas = {D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)}
    return {d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1}

def stop_on_collision(spd, bounds):
    return P(x=0 if (D.w in bounds and spd.x &lt; 0) or (D.e in bounds and spd.x &gt; 0) else spd.x,
             y=0 if (D.n in bounds and spd.y &lt; 0) or (D.s in bounds and spd.y &gt; 0) else spd.y)

def draw(screen, images, mario, tiles, pressed):
    def get_frame_index():
        if D.s not in get_boundaries(mario.rect, tiles):
            return 4
        return next(mario.frame_cycle) if {D.w, D.e} &amp; pressed else 6
    screen.fill((85, 168, 255))
    mario.facing_left = (D.w in pressed) if {D.w, D.e} &amp; pressed else mario.facing_left
    screen.blit(images[get_frame_index() + mario.facing_left * 9], mario.rect)
    for rect in tiles:
        screen.blit(images[18 if {*rect.topleft} &amp; {0, (SIZE-1)*16} else 19], rect)
    pygame.display.flip()

if __name__ == '__main__':
    main()
</code></pre>
<h2 id="basic-script-template">Basic Script Template</h2>
<pre><code class="language-python">#!/usr/bin/env python3
#
# Usage: .py
#

from collections import namedtuple
from dataclasses import make_dataclass
from enum import Enum
from sys import argv
import re


def main():
    pass


###
##  UTIL
#

def read_file(filename):
    with open(filename, encoding='utf-8') as file:
        return file.readlines()


if __name__ == '__main__':
    main()

</code></pre>
]]></content>
    </entry>
</feed>