<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yueqingsheng.github.io</id>
    <title>Random thoughts</title>
    <updated>2021-01-23T11:10:34.829Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yueqingsheng.github.io"/>
    <link rel="self" href="https://yueqingsheng.github.io/atom.xml"/>
    <subtitle>Don&apos;t Learn to Code — Learn to Automate</subtitle>
    <logo>https://yueqingsheng.github.io/images/avatar.png</logo>
    <icon>https://yueqingsheng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Random thoughts</rights>
    <entry>
        <title type="html"><![CDATA[推荐接口优化]]></title>
        <id>https://yueqingsheng.github.io/hou-duan-you-hua-zhi-lu/</id>
        <link href="https://yueqingsheng.github.io/hou-duan-you-hua-zhi-lu/">
        </link>
        <updated>2021-01-17T02:46:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="需求分析">需求分析</h1>
<h2 id="接口分析">接口分析：</h2>
<p>App 有一个高频调用的首页推荐接口。</p>
<ol>
<li>要支持页面向下滑动的时候加载新的内容，所以需要分页功能。</li>
<li>需要按一定的顺序返回热门导师，课程，团队数据。</li>
</ol>
<h2 id="主要目的">主要目的：</h2>
<p>在多用户访问情况下，提高速度。并确保数据一定的时效性。</p>
<h1 id="准备工作压力测试">准备工作：压力测试</h1>
<p><strong>单台机器配置： 16G 内存， 6 核 CPU</strong><br>
TODO</p>
<h1 id="尝试1-数据表反范式优化-内存缓存">尝试1:  数据表反范式优化 + 内存缓存</h1>
<p>课程内需要包括导师数据，团队内需要包括导师数据，导师内需要包括课程数据。<br>
为了防止多次的联表 JOIN 查询，在课程内存储冗余的序列化的导师 ID 列表，团队和导师也是如此。<br>
每次需要再通过 ID 去访问单独的导师，课程和团队。还可以记录一些访问信息，用来更新尝试 2 里的权重。</p>
<p>使用了内存缓存 接口 URL 和对应的返回数据的键值对。缺点：因为这样储存无法知道，某次单条数据更新对应了哪个接口下的更新。所以每次数据更新，缓存都会全部清空。再次从数据库读取。</p>
<h1 id="尝试2redis-有序集合">尝试2：Redis 有序集合</h1>
<blockquote>
<p>SortedSet: 主要存储有序集合，SortedSet的添加元素指令ZADD key score member [[score,member]…]会给每个添加的元素member绑定一个用于排序的值score，SortedSet就会根据score值的大小对元素进行排序，在这里就可以将 weight 当作score用于排序，SortedSet中的指令ZREVRANGE key start stop又可以返回指定区间内的成员，可以用来做分页。所以，SortedSet在这里是最适合的（插入，查询时间复杂度O(log(N))）。</p>
</blockquote>
<h2 id="zset-实现原理">ZSet 实现原理</h2>
<p>TODO</p>
<h2 id="要用到的-zset-操作">要用到的 ZSet 操作</h2>
<p><strong>zadd</strong><br>
语法：zadd key [NX|XX] [CH] [INCR] score member [score member…]<br>
XX: 仅仅更新存在的成员，不添加新成员。</p>
<p><strong>zrevrange</strong><br>
语法：zrevrange key start stop [WITHSCORES]<br>
作用：返回有序集 key 中，指定区间内的成员。<br>
其中成员的位置按 score 值递减(从大到小)来排列。</p>
<p>通过 Redis 有序集合自动更新内部的顺序，可以省去当缓存清空，再去数据库读取的情况。这样每次数据更新，只需要做单条数据插入操作就可以了，跳表更新顺序复杂度 O(log N)。Redis HSET。Redis 可以做为持久化储存，替代 MySQL 的作用。</p>
<h2 id="实现思路">实现思路</h2>
<ol>
<li>通过权重代表热度排序，每次用户点击，访问，通过异步（Message Queue?）去更新权重。权重 = 自设权重（用来推送广告）* 0.5 + 点击量 * 0.2 + 下单量 * 0.3</li>
<li>第一次访问，将数据放到到缓存。在权重上建立索引，加速 MySQL 拉取速度。之后从 redis 读取。</li>
</ol>
<h1 id="最终结果压力测试">最终结果：压力测试</h1>
<p>TODO</p>
<h1 id="可能的改进">可能的改进</h1>
<ol>
<li>前端本地缓存，访问历史数据不用每次调用接口。只有当用户下拉到新内容后，再重新获取。问题： 有可能新数据，和历史数据有重复，需要做去重处理。可以通过后端加一个全局 id 字段去重。（全局 id 可以存在 Redis 里，每次从 Redis 获取再更新）</li>
<li>个性化推荐。涉及机器学习算法，需要将多维度的用户数据输入，训练。可以通过增加用户日志记录的字段（如页面停留时间，访问不同接口频次）或通过建议用户丰富个人信息等增加用户信息维度作为输入，并且要记录不同用户访问过的页面日志，作为输出数据。累积到一定数据规模，进行训练。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[协程学习 + 青春有你2 评论项目改进 （多进程，多线程，协程异步比较）]]></title>
        <id>https://yueqingsheng.github.io/xie-cheng-xue-xi-qing-chun-you-ni-2-ping-lun-duo-jin-cheng-xie-cheng-gai-jin/</id>
        <link href="https://yueqingsheng.github.io/xie-cheng-xue-xi-qing-chun-you-ni-2-ping-lun-duo-jin-cheng-xie-cheng-gai-jin/">
        </link>
        <updated>2020-12-12T02:56:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是协程">什么是协程</h2>
<p>协程个人理解是相当于单个线程下的异步IO, 当程序运行到协程的时候，不等待结果返回直接向后执行，等IO 操作结束后，返回结果通知到消息队列，再做之后的操作。<br>
1.4 更新<br>
阅读 Linux Kernel Development 发现协程只存在用户态的一种形式，不对内核态暴露。这样就大大减少了，用户态和内核态切换的开销。有的语言设计，将协程的栈存放在堆中，切换的时候，直接从堆中读取，连上下文切换都节省了。</p>
<h2 id="python-协程">Python 协程</h2>
<h3 id="1-协程函数">1. 协程函数</h3>
<p>async 可以来声明协程函数。<br>
await 只能用在 async 函数内部， await 的下一步操作会等待协程操作完成返回后在继续执行。<br>
注意：协程函数必须添加到事件循环中注册，然后由事件循环去管理运行。</p>
<h3 id="2-运行协程-asynciorunfunc_">2. 运行协程， asyncio.run(func_)</h3>
<p>这个 run 函数总是会创建一个新的事件循环并在 run 结束之后关闭事件循环，所以，如果在同一个线程中已经有了一个事件循环，则不能再使用这个函数了，因为同一个线程不能有两个事件循环，而且这个 run 函数不能同时运行两次，因为他已经创建一个了。即同一个线程中是不允许有多个事件循环 loop 的。如 Jupyter 中内置有事件循环，要使用  nest-asyncio 这个包来解决这个问题，允许嵌套使用 事件循环。</p>
<pre><code class="language-python">!pip install nest_asyncio
import nest_asyncio 
nest_asyncio.apply()
</code></pre>
<blockquote>
<p>事件循环：线程一直在各个协程方法之间永不停歇的游走，遇到一个yield from 或者await就悬挂起来，然后又走到另外一个方法，依次进行下去，直到事件循环所有的方法执行完毕。</p>
</blockquote>
<blockquote>
<p>Task 任务是一个可等待对象， Task用来 并发调度的协程，即对协程函数的进一步包装？那为什么还需要包装呢？因为单纯的协程函数仅仅是一个函数而已，将其包装成任务，任务是可以包含各种状态的，异步编程最重要的就是对异步操作状态的把控了。<br>
使用 <code>task = asyncio.create_task(coro())</code>   来创建任务。</p>
</blockquote>
<p><strong>举个例子：</strong></p>
<pre><code class="language-python">import asyncio
import nest_asyncio

nest_asyncio.apply()
 
async def worker_1():
    print('worker_1 start')
    await asyncio.sleep(1)
    print('worker_1 done')
 
async def worker_2():
    print('worker_2 start')
    await asyncio.sleep(2)
    print('worker_2 done')
 
async def main():
    task1 = asyncio.create_task(worker_1())
    task2 = asyncio.create_task(worker_2())
    print('before await')
    await task1
    print('awaited worker_1')
    await task2
    print('awaited worker_2')

    
%time asyncio.run(main())
</code></pre>
<p>返回</p>
<pre><code>before await
worker_1 start
worker_2 start
worker_1 done
awaited worker_1
worker_2 done
awaited worker_2
CPU times: user 2.27 ms, sys: 3.97 ms, total: 6.24 ms
Wall time: 2 s
</code></pre>
<p>注意到，worker_1 的任务是在做完后，才执行 await 之后的内容。总的时间 2秒钟，而不是 2+1 =3 秒，通过 create_task 声明协程，运行到就会挂起，两个任务分别执行，相当于两个IO 是并发执行，所以总时间只用 2秒。</p>
<h2 id="之前项目实战">之前项目实战</h2>
<p>将爬取每个视频下的每一页设为子任务（一个协程）。</p>
<h2 id="多进程-vs-多线程-vs-协程">多进程 vs 多线程 vs 协程</h2>
<p>数据量： 332830 条评论<br>
多进程 运行时长：1分2秒980毫秒<br>
多线程 运行时长: 1分6秒651毫秒<br>
协程 运行时长: 52秒411毫秒<br>
分析：<br>
这个任务主要是典型的爬虫项目，网络 IO比较多，并不能有效的利用多进程计算的多核CPU，所以多进程和多线程并没有明显差距。<br>
本来以为 Python 的假多线程会跟单线程速度一样，结果去查了下，在 I/O阻塞时会释放锁，所以计算还是只能利用单核资源（GIL锁），但是因为 网络IO 阻塞可以模拟出 多线程的效果。<br>
<img src="https://yueqingsheng.github.io/post-images/1607748402629.png" alt="" loading="lazy"><br>
协程因为不需要切换上下文，栈空间小。速度要快一些。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[机器学习复习及项目整理]]></title>
        <id>https://yueqingsheng.github.io/ji-qi-xue-xi-fu-xi-ji-xiang-mu-zheng-li/</id>
        <link href="https://yueqingsheng.github.io/ji-qi-xue-xi-fu-xi-ji-xiang-mu-zheng-li/">
        </link>
        <updated>2020-10-09T13:03:15.000Z</updated>
        <content type="html"><![CDATA[<style>
a.b {
  outline: none;
  text-decoration: none;
  display: inline-block;
  width: 19.5%;
  margin-right: 0.625%;
  text-align: center;
  line-height: 3;
  color: black;
}


a.b:link, a.b:visited, a.b:focus {
  background: pink;
}

a.b:hover {     
  background: orange;
}

a.b:active {
  background: red;
  color: white;
}
</style>
<p><a class="b" href="https://www.notion.so/6523bbfc72df444482947f33712a5408" target="_blank">点击跳转</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面试准备]]></title>
        <id>https://yueqingsheng.github.io/suan-fa-bi-ji/</id>
        <link href="https://yueqingsheng.github.io/suan-fa-bi-ji/">
        </link>
        <updated>2020-10-06T18:12:55.000Z</updated>
        <content type="html"><![CDATA[<style>
a.b {
  outline: none;
  text-decoration: none;
  display: inline-block;
  width: 19.5%;
  margin-right: 0.625%;
  text-align: center;
  line-height: 3;
  color: black;
}


a.b:link, a.b:visited, a.b:focus {
  background: pink;
}

a.b:hover {     
  background: orange;
}

a.b:active {
  background: red;
  color: white;
}
</style>
<p><a class="b" href="https://www.notion.so/a5c08ffa2ad44af5b5bcc1807cdcdc07" target="_blank">算法基础</a></p>
<p>尽量通过简洁，有条理，并且可以关联知识的方法总结，不断精炼。<br>
<a class="b" href="https://www.notion.so/6976f3f8f65746dcbadbae87200ff669" target="_blank">知识汇总</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[月报 8月]]></title>
        <id>https://yueqingsheng.github.io/yue-bao-8-yue/</id>
        <link href="https://yueqingsheng.github.io/yue-bao-8-yue/">
        </link>
        <updated>2020-07-30T19:12:33.000Z</updated>
        <content type="html"><![CDATA[<p><a class="b" href="https://www.notion.so/8-20d76760643140de9868129d5d95ca8a" target="_blank">月报 8月</a></p>
<style>
a.b {
  outline: none;
  text-decoration: none;
  display: inline-block;
  width: 19.5%;
  margin-right: 0.625%;
  text-align: center;
  line-height: 3;
  color: black;
}


a.b:link, a.b:visited, a.b:focus {
  background: pink;
}

a.b:hover {     
  background: orange;
}

a.b:active {
  background: red;
  color: white;
}
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[月报 7月]]></title>
        <id>https://yueqingsheng.github.io/zhou-bao-7-yue/</id>
        <link href="https://yueqingsheng.github.io/zhou-bao-7-yue/">
        </link>
        <updated>2020-07-22T03:11:51.000Z</updated>
        <content type="html"><![CDATA[<p>两个多月没出现过了🙁，最近打算在自学 GRE 考试，看的内容不多。这个月最火的就是 GPT-3 demo 了，有些自然语言到代码生成的样例确实蛮意思的，根据描述就可以生成 SQL, Figma 或者 CSS 样式了。</p>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1596519527755.png" alt="" loading="lazy"></figure>
<h2 id="ai">AI</h2>
<p>CNN 入门讲解，对基础概念理解比较不错。 <a href="https://zhuanlan.zhihu.com/p/161640214"  target="_blank">什么是CNN？写给小白的机器学习入门贴</a></p>
<p>用之前提到过的 OPENAI 的 GPT-3 API 做的样例，包括了根据描述生成代码之类的比较有意思的东西 。 <a href="https://machinelearningtokyo.com/2020/07/26/10-cool-gpt-3-demos/"  target="_blank">10 COOL GPT-3 DEMOS</a></p>
<p>Github 上整理的 demo  <a href="https://github.com/elyase/awesome-gpt3"  target="_blank">awesome-gpt3</a></p>
<h2 id="文章">文章</h2>
<p>感觉把 Computer Science 这个行业讲的蛮好的，建议毕业生或有兴趣从事 CS 的都看一下 《黑客与画家》第二章。 <a href="https://weread.qq.com/web/reader/5b9328f05dd9fb5b922d1ebk65132ca01b6512bd43d90e3"  target="_blank">2 黑客与画家</a></p>
<h2 id="视频">视频</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1596520101929.gif" alt="" loading="lazy"><br>
软饭硬吃，哈哈，有以前毅吧那味了。<br>
<a href="https://www.bilibili.com/video/BV1z54y1S7AX"  target="_blank">广东爱情故事</a></p>
<div class="aspect-ratio">
        <iframe src="//player.bilibili.com/player.html?aid=839022882&bvid=BV1z54y1S7AX&cid=219392622&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>
<p>认真做历史科普的人不多了，老阴阳师做科普的更不多了。最近读了篇 GRE 文章讲，虽然在科技发展如此快的时代，有些科学常识是如此的珍贵，对于普通人却像腐烂在温室里的花，无人在乎。<br>
<a href="https://www.acfun.cn/v/ac16518467"  target="_blank">西方灾难史：美国大萧条（全集），点这里看全集哦。</a></p>
<div class="aspect-ratio"><iframe style="min-width: 500px;min-height: 300px"   src="https://www.acfun.cn/player/ac16518467" id="ACPlayer-re"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows 本地运行 Jupyter 作业教程]]></title>
        <id>https://yueqingsheng.github.io/windows-ben-di-yun-xing-jupyter-zuo-ye-jiao-cheng/</id>
        <link href="https://yueqingsheng.github.io/windows-ben-di-yun-xing-jupyter-zuo-ye-jiao-cheng/">
        </link>
        <updated>2020-06-20T05:04:45.000Z</updated>
        <content type="html"><![CDATA[<p>推荐 Anaconda 傻瓜式安装，安装完后启动 Jupyter<br>
<img src="https://yueqingsheng.github.io/post-images/1592759276980.png" alt="" loading="lazy"></p>
<p>直接在本地运行下载下来的 notebook 会有几个问题，提供下解决方案：</p>
<h2 id="1-error-invalid-requirement">1. ERROR: Invalid requirement: '#'</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592759420716.png" alt="" loading="lazy"><br>
当命令行语句和注释在同一行时候会报错，可以把同行的注释去掉，或者挪到上面</p>
<h2 id="2-module-could-not-be-found-找不到雅达利-乒乓环境">2. module could not be found 找不到雅达利 乒乓环境</h2>
<p>做如下几步</p>
<ol>
<li>
<p>卸载 gym and atari-py (If already installed):<br>
pip uninstall atari-py<br>
pip uninstall gym[atari]</p>
</li>
<li>
<p>下载 VS build 工具 : https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&amp;rel=16</p>
</li>
<li>
<p>运行并选择  &quot;C++ build tools&quot;安装.<br>
<img src="https://yueqingsheng.github.io/post-images/1592759774751.png" alt="" loading="lazy"></p>
</li>
<li>
<p>重启电脑</p>
</li>
<li>
<p>安装 cmake, atari-py and gym<br>
pip install cmake<br>
pip install atari-py<br>
pip install gym[atari]</p>
</li>
<li>
<p>跑一下测试:<br>
import atari_py<br>
print(atari_py.list_games())<br>
如果成功会 print 下面</p>
</li>
</ol>
<pre><code class="language-python">['adventure', 'air_raid', 'alien', 'amidar', 'assault', 'asterix', 'asteroids', 'atlantis', 'bank_heist', 'battle_zone', 'beam_rider', 'berzerk', 'bowling', 'boxing', 'breakout', 'carnival', 'centipede', 'chopper_command', 'crazy_climber', 'defender', 'demon_attack', 'double_dunk', 'elevator_action', 'enduro', 'fishing_derby', 'freeway', 'frostbite', 'gopher', 'gravitar', 'hero', 'ice_hockey', 'jamesbond', 'journey_escape', 'kaboom', 'kangaroo', 'krull', 'kung_fu_master', 'montezuma_revenge', 'ms_pacman', 'name_this_game', 'phoenix', 'pitfall', 'pong', 'pooyan', 'private_eye', 'qbert', 'riverraid', 'road_runner', 'robotank', 'seaquest', 'skiing', 'solaris', 'space_invaders', 'star_gunner', 'tennis', 'time_pilot', 'tutankham', 'up_n_down', 'venture', 'video_pinball', 'wizard_of_wor', 'yars_revenge', 'zaxxon']
</code></pre>
<h2 id="3-wrn-found-non-empty-cuda_visible_devices-but-parl-found-that-paddle-was-not-complied-with-cuda-which-may-cause-issues-keneral-dead">3. WRN Found non-empty CUDA_VISIBLE_DEVICES. But PARL found that Paddle was not complied with CUDA, which may cause issues. keneral dead</h2>
<p>这个错误 Kernel 会挂掉，然后无限重启，主要是 检测到了电脑里的GPU, 但是没有安装 Cuda 导致的。 因为这里我们只使用 CPU 来跑，所以把 GPU 检测关闭就好了<br>
在最后运行代码前加上这两行：</p>
<pre><code class="language-python">import os
os.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;-1&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[强化学习 Day5 连续空间动作 DDPG]]></title>
        <id>https://yueqingsheng.github.io/qiang-hua-xue-xi-day5-lian-xu-kong-jian-dong-zuo-ddpg/</id>
        <link href="https://yueqingsheng.github.io/qiang-hua-xue-xi-day5-lian-xu-kong-jian-dong-zuo-ddpg/">
        </link>
        <updated>2020-06-19T15:21:00.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://yueqingsheng.github.io/post-images/1592752914800.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592752944679.png" alt="" loading="lazy"><br>
DQN 扩展到连续控制动作空间<br>
策略网络负责对外展示动作, critc 对action 打分，action -&gt; Q value，迎合评委网络使 Q 尽可能高<br>
<img src="https://yueqingsheng.github.io/post-images/1592753557001.png" alt="" loading="lazy"><br>
Q 网络逼近 Q-target, 使用 MSE<br>
Q target 不稳定，所以专门建立 target_Q 和 target_P 网络（next_action ）<br>
<img src="https://yueqingsheng.github.io/post-images/1592753707568.png" alt="" loading="lazy"><br>
为了防止 target_Q 网络更新, (定期copy), 需要 stop gradient<br>
<img src="https://yueqingsheng.github.io/post-images/1592754333762.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592754555792.png" alt="" loading="lazy"><br>
只更新 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>, 所以minimize 中 传入要更新的 actor 参数<br>
<img src="https://yueqingsheng.github.io/post-images/1592754856731.png" alt="" loading="lazy"></p>
<h2 id="总结">总结</h2>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592754975966.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统设计7 GFS]]></title>
        <id>https://yueqingsheng.github.io/xi-tong-she-ji-7-gfs/</id>
        <link href="https://yueqingsheng.github.io/xi-tong-she-ji-7-gfs/">
        </link>
        <updated>2020-06-18T17:13:25.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592838132417.png" alt="" loading="lazy"></figure>
<h2 id="scenario">Scenario</h2>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592937998924.png" alt="" loading="lazy"></figure>
<h2 id="service">Service</h2>
<p>clinet + Server<br>
多台机器怎么沟通？<br>
<img src="https://yueqingsheng.github.io/post-images/1592938077078.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592938113585.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592938321692.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592938364579.png" alt="" loading="lazy"></p>
<h2 id="storage">Storage</h2>
<h2 id="保存一个文件">保存一个文件</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592938764791.png" alt="" loading="lazy"><br>
MetaData 的访问更多，A, B 两种存储结构<br>
机械硬盘，磁头调需要时间，所以选择A<br>
文件内容分段储存还是连续存储，B 适合修改或追加内容<br>
<img src="https://yueqingsheng.github.io/post-images/1592938947650.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592939145448.png" alt="" loading="lazy"><br>
100T，block 太多，增加 block 大小， 4k -&gt; 64M, 劣势浪费了小空间， 4m 占用了64m空间<br>
<img src="https://yueqingsheng.github.io/post-images/1592939321203.png" alt="" loading="lazy"><br>
10P，一台电脑 0.1P<br>
offset 可以只存在 Chunk server 上<br>
<img src="https://yueqingsheng.github.io/post-images/1592939740947.png" alt="" loading="lazy"><br>
换格子不用通知 Master<br>
<img src="https://yueqingsheng.github.io/post-images/1592939893628.png" alt="" loading="lazy"></p>
<h2 id="read-write">Read &amp; Write</h2>
<h3 id="写入">写入</h3>
<p>一次写入还是多次写入，传输单位是Chunk<br>
<img src="https://yueqingsheng.github.io/post-images/1592940093322.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592940144296.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592940260498.png" alt="" loading="lazy"><br>
和Master 沟通，直接给chunk server 写<br>
<img src="https://yueqingsheng.github.io/post-images/1592940431060.png" alt="" loading="lazy"></p>
<h3 id="读入">读入</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592940583035.png" alt="" loading="lazy"><br>
并行从不同 Chunk server 读入<br>
<img src="https://yueqingsheng.github.io/post-images/1592940638455.png" alt="" loading="lazy"></p>
<h2 id="scale">Scale</h2>
<p>单 Master<br>
<img src="https://yueqingsheng.github.io/post-images/1592940743044.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592940828767.png" alt="" loading="lazy"><br>
检查损坏<br>
CheckSum, XOR(exclusive OR) 相同为0， 不同为1，有误检情况，极低<br>
<img src="https://yueqingsheng.github.io/post-images/1592941171998.png" alt="" loading="lazy"><br>
1 个 cheksum 4bytes, 1 个 chunk 1个 chunksum<br>
<img src="https://yueqingsheng.github.io/post-images/1592941328271.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592941393981.png" alt="" loading="lazy"></p>
<h3 id="replica-备份">Replica 备份</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592941646023.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592941630620.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592941717310.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592941741519.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942222483.png" alt="" loading="lazy"><br>
B. 单次通讯<br>
<img src="https://yueqingsheng.github.io/post-images/1592941853201.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592941886863.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592941945801.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942052569.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942111752.png" alt="" loading="lazy"></p>
<h2 id="实战">实战</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592942352741.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942408792.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942469829.png" alt="" loading="lazy"><br>
QPS<br>
<img src="https://yueqingsheng.github.io/post-images/1592942546504.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942743390.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942782661.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592942892343.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[强化学习 Day 4 基于策略方法]]></title>
        <id>https://yueqingsheng.github.io/qiang-hua-xue-xi-day-4-ji-yu-ce-lue-fang-fa/</id>
        <link href="https://yueqingsheng.github.io/qiang-hua-xue-xi-day-4-ji-yu-ce-lue-fang-fa/">
        </link>
        <updated>2020-06-18T06:28:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="value-based-vs-policy-based">Value-based vs policy-based</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592591392361.png" alt="" loading="lazy"><br>
policy based :  直接求action<br>
policy based:  输出动作的概率<br>
<img src="https://yueqingsheng.github.io/post-images/1592591618895.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592591641683.png" alt="" loading="lazy"><br>
最后一层 softmax<br>
episode: 每轮游戏<br>
优化目的： max 每个episode的总reward<br>
<img src="https://yueqingsheng.github.io/post-images/1592602759204.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592602819167.png" alt="" loading="lazy"><br>
环境的随机性无法控制</p>
<h2 id="期望回报">期望回报</h2>
<p><img src="https://yueqingsheng.github.io/post-images/1592603030920.png" alt="" loading="lazy"><br>
环境概率是未知的， N是 episode数。</p>
<h3 id="优化策略函数">优化策略函数</h3>
<p><img src="https://yueqingsheng.github.io/post-images/1592603189106.png" alt="" loading="lazy"><br>
优化目标 期望回报最大， 梯度上升<br>
<img src="https://yueqingsheng.github.io/post-images/1592610701005.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592623362667.png" alt="" loading="lazy"><br>
蒙特卡洛每个 Episode 更新一次， 时序差分每个action更新一次<br>
<img src="https://yueqingsheng.github.io/post-images/1592623555097.png" alt="" loading="lazy"><br>
根据公式反向推到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">G_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<h2 id="reinforce">Reinforce</h2>
<p>每个 Episode , 通过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>s</mi><mi>t</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>t</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(s_t, a_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 求出 G_t, 对于每一步使用 ln 函数更新神经网络参数值<br>
<img src="https://yueqingsheng.github.io/post-images/1592624092549.png" alt="" loading="lazy"><br>
类比 Cross entrophy, 因为sum_ln 不一定是正确的acition, 只是真实的action, 所以需要乘上总奖励系数 G<br>
<img src="https://yueqingsheng.github.io/post-images/1592624728691.png" alt="" loading="lazy"></p>
<h3 id="流程图">流程图</h3>
<figure data-type="image" tabindex="1"><img src="https://yueqingsheng.github.io/post-images/1592625148267.png" alt="" loading="lazy"></figure>
<h2 id="总结">总结</h2>
<figure data-type="image" tabindex="2"><img src="https://yueqingsheng.github.io/post-images/1592625752484.png" alt="" loading="lazy"></figure>
<p><img src="https://yueqingsheng.github.io/post-images/1592626079005.png" alt="" loading="lazy"><br>
<img src="https://yueqingsheng.github.io/post-images/1592626129133.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>